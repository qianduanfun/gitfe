(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{447:function(e,t,n){"use strict";n.r(t);var a=n(48),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"dockerfile-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-reference"}},[e._v("#")]),e._v(" Dockerfile reference")]),e._v(" "),n("p",[e._v("Docker can build images automatically by reading the instructions from a\n"),n("code",[e._v("Dockerfile")]),e._v(". A "),n("code",[e._v("Dockerfile")]),e._v(" is a text document that contains all the commands a\nuser could call on the command line to assemble an image. Using "),n("code",[e._v("docker build")]),e._v("\nusers can create an automated build that executes several command-line\ninstructions in succession.")]),e._v(" "),n("p",[e._v("This page describes the commands you can use in a "),n("code",[e._v("Dockerfile")]),e._v(". When you are\ndone reading this page, refer to the "),n("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Dockerfile")]),e._v(" Best\nPractices"),n("OutboundLink")],1),e._v(" for a tip-oriented guide.")]),e._v(" "),n("h2",{attrs:{id:"usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),n("p",[e._v("The "),n("RouterLink",{attrs:{to:"/docs/docker/commandline/build.html"}},[n("code",[e._v("docker build")])]),e._v(" command builds an image from\na "),n("code",[e._v("Dockerfile")]),e._v(" and a "),n("em",[e._v("context")]),e._v(". The build's context is the set of files at a\nspecified location "),n("code",[e._v("PATH")]),e._v(" or "),n("code",[e._v("URL")]),e._v(". The "),n("code",[e._v("PATH")]),e._v(" is a directory on your local\nfilesystem. The "),n("code",[e._v("URL")]),e._v(" is a Git repository location.")],1),e._v(" "),n("p",[e._v("A context is processed recursively. So, a "),n("code",[e._v("PATH")]),e._v(" includes any subdirectories and\nthe "),n("code",[e._v("URL")]),e._v(" includes the repository and its submodules. This example shows a\nbuild command that uses the current directory as context:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker build .\nSending build context to Docker daemon  6.51 MB\n...\n")])])]),n("p",[e._v("The build is run by the Docker daemon, not by the CLI. The first thing a build\nprocess does is send the entire context (recursively) to the daemon.  In most\ncases, it's best to start with an empty directory as context and keep your\nDockerfile in that directory. Add only the files needed for building the\nDockerfile.")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Warning")]),e._v(": Do not use your root directory, "),n("code",[e._v("/")]),e._v(", as the "),n("code",[e._v("PATH")]),e._v(" as it causes\nthe build to transfer the entire contents of your hard drive to the Docker\ndaemon.")])]),e._v(" "),n("p",[e._v("To use a file in the build context, the "),n("code",[e._v("Dockerfile")]),e._v(" refers to the file specified\nin an instruction, for example,  a "),n("code",[e._v("COPY")]),e._v(" instruction. To increase the build's\nperformance, exclude files and directories by adding a "),n("code",[e._v(".dockerignore")]),e._v(" file to\nthe context directory.  For information about how to "),n("a",{attrs:{href:"#dockerignore-file"}},[e._v("create a "),n("code",[e._v(".dockerignore")]),e._v("\nfile")]),e._v(" see the documentation on this page.")]),e._v(" "),n("p",[e._v("Traditionally, the "),n("code",[e._v("Dockerfile")]),e._v(" is called "),n("code",[e._v("Dockerfile")]),e._v(" and located in the root\nof the context. You use the "),n("code",[e._v("-f")]),e._v(" flag with "),n("code",[e._v("docker build")]),e._v(" to point to a Dockerfile\nanywhere in your file system.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker build -f /path/to/a/Dockerfile .\n")])])]),n("p",[e._v("You can specify a repository and tag at which to save the new image if\nthe build succeeds:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker build -t shykes/myapp .\n")])])]),n("p",[e._v("To tag the image into multiple repositories after the build,\nadd multiple "),n("code",[e._v("-t")]),e._v(" parameters when you run the "),n("code",[e._v("build")]),e._v(" command:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest .\n")])])]),n("p",[e._v("Before the Docker daemon runs the instructions in the "),n("code",[e._v("Dockerfile")]),e._v(", it performs\na preliminary validation of the "),n("code",[e._v("Dockerfile")]),e._v(" and returns an error if the syntax is incorrect:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker build -t test/myapp .\nSending build context to Docker daemon 2.048 kB\nError response from daemon: Unknown instruction: RUNCMD\n")])])]),n("p",[e._v("The Docker daemon runs the instructions in the "),n("code",[e._v("Dockerfile")]),e._v(" one-by-one,\ncommitting the result of each instruction\nto a new image if necessary, before finally outputting the ID of your\nnew image. The Docker daemon will automatically clean up the context you\nsent.")]),e._v(" "),n("p",[e._v("Note that each instruction is run independently, and causes a new image\nto be created - so "),n("code",[e._v("RUN cd /tmp")]),e._v(" will not have any effect on the next\ninstructions.")]),e._v(" "),n("p",[e._v("Whenever possible, Docker will re-use the intermediate images (cache),\nto accelerate the "),n("code",[e._v("docker build")]),e._v(" process significantly. This is indicated by\nthe "),n("code",[e._v("Using cache")]),e._v(" message in the console output.\n(For more information, see the "),n("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#build-cache",target:"_blank",rel:"noopener noreferrer"}},[e._v("Build cache section"),n("OutboundLink")],1),e._v(" in the\n"),n("code",[e._v("Dockerfile")]),e._v(" best practices guide):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker build -t svendowideit/ambassador .\nSending build context to Docker daemon 15.36 kB\nStep 1/4 : FROM alpine:3.2\n ---\x3e 31f630c65071\nStep 2/4 : MAINTAINER SvenDowideit@home.org.au\n ---\x3e Using cache\n ---\x3e 2a1c91448f5f\nStep 3/4 : RUN apk update &&      apk add socat &&        rm -r /var/cache/\n ---\x3e Using cache\n ---\x3e 21ed6e7fbb73\nStep 4/4 : CMD env | grep _TCP= | (sed 's/.*_PORT_\\([0-9]*\\)_TCP=tcp:\\/\\/\\(.*\\):\\(.*\\)/socat -t 100000000 TCP4-LISTEN:\\1,fork,reuseaddr TCP4:\\2:\\3 \\&/' && echo wait) | sh\n ---\x3e Using cache\n ---\x3e 7ea8aef582cc\nSuccessfully built 7ea8aef582cc\n")])])]),n("p",[e._v("Build cache is only used from images that have a local parent chain. This means\nthat these images were created by previous builds or the whole chain of images\nwas loaded with "),n("code",[e._v("docker load")]),e._v(". If you wish to use build cache of a specific\nimage you can specify it with "),n("code",[e._v("--cache-from")]),e._v(" option. Images specified with\n"),n("code",[e._v("--cache-from")]),e._v(" do not need to have a parent chain and may be pulled from other\nregistries.")]),e._v(" "),n("p",[e._v("When you're done with your build, you're ready to look into "),n("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockerrepos/#/contributing-to-docker-hub",target:"_blank",rel:"noopener noreferrer"}},[n("em",[e._v("Pushing a\nrepository to its registry")]),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"buildkit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#buildkit"}},[e._v("#")]),e._v(" BuildKit")]),e._v(" "),n("p",[e._v("Starting with version 18.09, Docker supports a new backend for executing your\nbuilds that is provided by the "),n("a",{attrs:{href:"https://github.com/moby/buildkit",target:"_blank",rel:"noopener noreferrer"}},[e._v("moby/buildkit"),n("OutboundLink")],1),e._v("\nproject. The BuildKit backend provides many benefits compared to the old\nimplementation. For example, BuildKit can:")]),e._v(" "),n("ul",[n("li",[e._v("Detect and skip executing unused build stages")]),e._v(" "),n("li",[e._v("Parallelize building independent build stages")]),e._v(" "),n("li",[e._v("Incrementally transfer only the changed files in your build context between builds")]),e._v(" "),n("li",[e._v("Detect and skip transferring unused files in your build context")]),e._v(" "),n("li",[e._v("Use external Dockerfile implementations with many new features")]),e._v(" "),n("li",[e._v("Avoid side-effects with rest of the API (intermediate images and containers)")]),e._v(" "),n("li",[e._v("Prioritize your build cache for automatic pruning")])]),e._v(" "),n("p",[e._v("To use the BuildKit backend, you need to set an environment variable\n"),n("code",[e._v("DOCKER_BUILDKIT=1")]),e._v(" on the CLI before invoking "),n("code",[e._v("docker build")]),e._v(".")]),e._v(" "),n("p",[e._v("To learn about the experimental Dockerfile syntax available to BuildKit-based\nbuilds "),n("a",{attrs:{href:"https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("refer to the documentation in the BuildKit repository"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[e._v("#")]),e._v(" Format")]),e._v(" "),n("p",[e._v("Here is the format of the "),n("code",[e._v("Dockerfile")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comment")]),e._v("\nINSTRUCTION arguments\n")])])]),n("p",[e._v("The instruction is not case-sensitive. However, convention is for them to\nbe UPPERCASE to distinguish them from arguments more easily.")]),e._v(" "),n("p",[e._v("Docker runs instructions in a "),n("code",[e._v("Dockerfile")]),e._v(" in order. A "),n("code",[e._v("Dockerfile")]),e._v(" "),n("strong",[e._v("must\nbegin with a `FROM` instruction")]),e._v(". This may be after "),n("a",{attrs:{href:"#parser-directives"}},[e._v("parser\ndirectives")]),e._v(", "),n("a",{attrs:{href:"#format"}},[e._v("comments")]),e._v(", and globally scoped\n"),n("a",{attrs:{href:"#arg"}},[e._v("ARGs")]),e._v(". The "),n("code",[e._v("FROM")]),e._v(" instruction specifies the "),n("RouterLink",{attrs:{to:"/docs/docker/glossary.html#parent-image"}},[n("em",[e._v("Parent\nImage")])]),e._v(" from which you are building. "),n("code",[e._v("FROM")]),e._v("\nmay only be preceded by one or more "),n("code",[e._v("ARG")]),e._v(" instructions, which declare arguments\nthat are used in "),n("code",[e._v("FROM")]),e._v(" lines in the "),n("code",[e._v("Dockerfile")]),e._v(".")],1),e._v(" "),n("p",[e._v("Docker treats lines that "),n("em",[e._v("begin")]),e._v(" with "),n("code",[e._v("#")]),e._v(" as a comment, unless the line is\na valid "),n("a",{attrs:{href:"#parser-directives"}},[e._v("parser directive")]),e._v(". A "),n("code",[e._v("#")]),e._v(" marker anywhere\nelse in a line is treated as an argument. This allows statements like:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comment")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'we are running some # of cool things'")]),e._v("\n")])])]),n("p",[e._v("Line continuation characters are not supported in comments.")]),e._v(" "),n("h2",{attrs:{id:"parser-directives"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parser-directives"}},[e._v("#")]),e._v(" Parser directives")]),e._v(" "),n("p",[e._v("Parser directives are optional, and affect the way in which subsequent lines\nin a "),n("code",[e._v("Dockerfile")]),e._v(" are handled. Parser directives do not add layers to the build,\nand will not be shown as a build step. Parser directives are written as a\nspecial type of comment in the form "),n("code",[e._v("# directive=value")]),e._v(". A single directive\nmay only be used once.")]),e._v(" "),n("p",[e._v("Once a comment, empty line or builder instruction has been processed, Docker\nno longer looks for parser directives. Instead it treats anything formatted\nas a parser directive as a comment and does not attempt to validate if it might\nbe a parser directive. Therefore, all parser directives must be at the very\ntop of a "),n("code",[e._v("Dockerfile")]),e._v(".")]),e._v(" "),n("p",[e._v("Parser directives are not case-sensitive. However, convention is for them to\nbe lowercase. Convention is also to include a blank line following any\nparser directives. Line continuation characters are not supported in parser\ndirectives.")]),e._v(" "),n("p",[e._v("Due to these rules, the following examples are all invalid:")]),e._v(" "),n("p",[e._v("Invalid due to line continuation:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# direc \\")]),e._v("\ntive=value\n")])])]),n("p",[e._v("Invalid due to appearing twice:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive=value1")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive=value2")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ImageName\n")])])]),n("p",[e._v("Treated as a comment due to appearing after a builder instruction:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ImageName\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive=value")]),e._v("\n")])])]),n("p",[e._v("Treated as a comment due to appearing after a comment which is not a parser\ndirective:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# About my dockerfile")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive=value")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ImageName\n")])])]),n("p",[e._v("The unknown directive is treated as a comment due to not being recognized. In\naddition, the known directive is treated as a comment due to appearing after\na comment which is not a parser directive.")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# unknowndirective=value")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# knowndirective=value")]),e._v("\n")])])]),n("p",[e._v("Non line-breaking whitespace is permitted in a parser directive. Hence, the\nfollowing lines are all treated identically:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#directive=value")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive =value")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#\tdirective= value")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directive = value")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#\t  dIrEcTiVe=value")]),e._v("\n")])])]),n("p",[e._v("The following parser directives are supported:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("syntax")])]),e._v(" "),n("li",[n("code",[e._v("escape")])])]),e._v(" "),n("h2",{attrs:{id:"syntax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" syntax")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("# syntax=[remote image reference]\n")])])]),n("p",[e._v("For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("# syntax=docker/dockerfile\n# syntax=docker/dockerfile:1.0\n# syntax=docker.io/docker/dockerfile:1\n# syntax=docker/dockerfile:1.0.0-experimental\n# syntax=example.com/user/repo:tag@sha256:abcdef...\n")])])]),n("p",[e._v("This feature is only enabled if the "),n("a",{attrs:{href:"#buildkit"}},[e._v("BuildKit")]),e._v(" backend is used.")]),e._v(" "),n("p",[e._v("The syntax directive defines the location of the Dockerfile builder that is used for\nbuilding the current Dockerfile. The BuildKit backend allows to seamlessly use\nexternal implementations of builders that are distributed as Docker images and\nexecute inside a container sandbox environment.")]),e._v(" "),n("p",[e._v("Custom Dockerfile implementation allows you to:")]),e._v(" "),n("ul",[n("li",[e._v("Automatically get bugfixes without updating the daemon")]),e._v(" "),n("li",[e._v("Make sure all users are using the same implementation to build your Dockerfile")]),e._v(" "),n("li",[e._v("Use the latest features without updating the daemon")]),e._v(" "),n("li",[e._v("Try out new experimental or third-party features")])]),e._v(" "),n("h3",{attrs:{id:"official-releases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#official-releases"}},[e._v("#")]),e._v(" Official releases")]),e._v(" "),n("p",[e._v("Docker distributes official versions of the images that can be used for building\nDockerfiles under "),n("code",[e._v("docker/dockerfile")]),e._v(" repository on Docker Hub. There are two\nchannels where new images are released: stable and experimental.")]),e._v(" "),n("p",[e._v("Stable channel follows semantic versioning. For example:")]),e._v(" "),n("ul",[n("li",[e._v("docker/dockerfile:1.0.0 - only allow immutable version 1.0.0")]),e._v(" "),n("li",[e._v("docker/dockerfile:1.0 - allow versions 1.0.*")]),e._v(" "),n("li",[e._v("docker/dockerfile:1 - allow versions 1."),n("em",[e._v(".")])]),e._v(" "),n("li",[e._v("docker/dockerfile:latest - latest release on stable channel")])]),e._v(" "),n("p",[e._v("The experimental channel uses incremental versioning with the major and minor\ncomponent from the stable channel on the time of the release. For example:")]),e._v(" "),n("ul",[n("li",[e._v("docker/dockerfile:1.0.1-experimental - only allow immutable version 1.0.1-experimental")]),e._v(" "),n("li",[e._v("docker/dockerfile:1.0-experimental - latest experimental releases after 1.0")]),e._v(" "),n("li",[e._v("docker/dockerfile:experimental - latest release on experimental channel")])]),e._v(" "),n("p",[e._v("You should choose a channel that best fits your needs. If you only want\nbugfixes, you should use "),n("code",[e._v("docker/dockerfile:1.0")]),e._v(". If you want to benefit from\nexperimental features, you should use the experimental channel. If you are using\nthe experimental channel, newer releases may not be backwards compatible, so it\nis recommended to use an immutable full version variant.")]),e._v(" "),n("p",[e._v("For master builds and nightly feature releases refer to the description in "),n("a",{attrs:{href:"https://github.com/moby/buildkit/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("the source repository"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"escape"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#escape"}},[e._v("#")]),e._v(" escape")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("# escape=\\ (backslash)\n")])])]),n("p",[e._v("Or")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("# escape=` (backtick)\n")])])]),n("p",[e._v("The "),n("code",[e._v("escape")]),e._v(" directive sets the character used to escape characters in a\n"),n("code",[e._v("Dockerfile")]),e._v(". If not specified, the default escape character is "),n("code",[e._v("\\")]),e._v(".")]),e._v(" "),n("p",[e._v("The escape character is used both to escape characters in a line, and to\nescape a newline. This allows a "),n("code",[e._v("Dockerfile")]),e._v(" instruction to\nspan multiple lines. Note that regardless of whether the "),n("code",[e._v("escape")]),e._v(" parser\ndirective is included in a "),n("code",[e._v("Dockerfile")]),e._v(", "),n("em",[e._v("escaping is not performed in\na "),n("code",[e._v("RUN")]),e._v(" command, except at the end of a line.")])]),e._v(" "),n("p",[e._v("Setting the escape character to "),n("code",[e._v("`")]),e._v(" is especially useful on\n"),n("code",[e._v("Windows")]),e._v(", where "),n("code",[e._v("\\")]),e._v(" is the directory path separator. "),n("code",[e._v("`")]),e._v(" is consistent\nwith "),n("a",{attrs:{href:"https://technet.microsoft.com/en-us/library/hh847755.aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("Windows PowerShell"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("Consider the following example which would fail in a non-obvious way on\n"),n("code",[e._v("Windows")]),e._v(". The second "),n("code",[e._v("\\")]),e._v(" at the end of the second line would be interpreted as an\nescape for the newline, instead of a target of the escape from the first "),n("code",[e._v("\\")]),e._v(".\nSimilarly, the "),n("code",[e._v("\\")]),e._v(" at the end of the third line would, assuming it was actually\nhandled as an instruction, cause it be treated as a line continuation. The result\nof this dockerfile is that second and third lines are considered a single\ninstruction:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" microsoft/nanoserver\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COPY")]),e._v(" testfile.txt c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\\\\\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" dir c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\\\n")])])]),n("p",[e._v("Results in:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("PS C:\\John> docker build -t cmd .\nSending build context to Docker daemon 3.072 kB\nStep 1/2 : FROM microsoft/nanoserver\n ---\x3e 22738ff49c6d\nStep 2/2 : COPY testfile.txt c:\\RUN dir c:\nGetFileAttributesEx c:RUN: The system cannot find the file specified.\nPS C:\\John>\n")])])]),n("p",[e._v("One solution to the above would be to use "),n("code",[e._v("/")]),e._v(" as the target of both the "),n("code",[e._v("COPY")]),e._v("\ninstruction, and "),n("code",[e._v("dir")]),e._v(". However, this syntax is, at best, confusing as it is not\nnatural for paths on "),n("code",[e._v("Windows")]),e._v(", and at worst, error prone as not all commands on\n"),n("code",[e._v("Windows")]),e._v(" support "),n("code",[e._v("/")]),e._v(" as the path separator.")]),e._v(" "),n("p",[e._v("By adding the "),n("code",[e._v("escape")]),e._v(" parser directive, the following "),n("code",[e._v("Dockerfile")]),e._v(" succeeds as\nexpected with the use of natural platform semantics for file paths on "),n("code",[e._v("Windows")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("# escape=`\n\nFROM microsoft/nanoserver\nCOPY testfile.txt c:\\\nRUN dir c:\\\n")])])]),n("p",[e._v("Results in:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("PS C:\\John> docker build -t succeeds --no-cache=true .\nSending build context to Docker daemon 3.072 kB\nStep 1/3 : FROM microsoft/nanoserver\n ---\x3e 22738ff49c6d\nStep 2/3 : COPY testfile.txt c:\\\n ---\x3e 96655de338de\nRemoving intermediate container 4db9acbb1682\nStep 3/3 : RUN dir c:\\\n ---\x3e Running in a2c157f842f5\n Volume in drive C has no label.\n Volume Serial Number is 7E6D-E0F7\n\n Directory of c:\\\n\n10/05/2016  05:04 PM             1,894 License.txt\n10/05/2016  02:22 PM    <DIR>          Program Files\n10/05/2016  02:14 PM    <DIR>          Program Files (x86)\n10/28/2016  11:18 AM                62 testfile.txt\n10/28/2016  11:20 AM    <DIR>          Users\n10/28/2016  11:20 AM    <DIR>          Windows\n           2 File(s)          1,956 bytes\n           4 Dir(s)  21,259,096,064 bytes free\n ---\x3e 01c7f3bef04f\nRemoving intermediate container a2c157f842f5\nSuccessfully built 01c7f3bef04f\nPS C:\\John>\n")])])]),n("h2",{attrs:{id:"environment-replacement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#environment-replacement"}},[e._v("#")]),e._v(" Environment replacement")]),e._v(" "),n("p",[e._v("Environment variables (declared with "),n("a",{attrs:{href:"#env"}},[e._v("the "),n("code",[e._v("ENV")]),e._v(" statement")]),e._v(") can also be\nused in certain instructions as variables to be interpreted by the\n"),n("code",[e._v("Dockerfile")]),e._v(". Escapes are also handled for including variable-like syntax\ninto a statement literally.")]),e._v(" "),n("p",[e._v("Environment variables are notated in the "),n("code",[e._v("Dockerfile")]),e._v(" either with\n"),n("code",[e._v("$variable_name")]),e._v(" or "),n("code",[e._v("${variable_name}")]),e._v(". They are treated equivalently and the\nbrace syntax is typically used to address issues with variable names with no\nwhitespace, like "),n("code",[e._v("${foo}_bar")]),e._v(".")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("${variable_name}")]),e._v(" syntax also supports a few of the standard "),n("code",[e._v("bash")]),e._v("\nmodifiers as specified below:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("${variable:-word}")]),e._v(" indicates that if "),n("code",[e._v("variable")]),e._v(" is set then the result\nwill be that value. If "),n("code",[e._v("variable")]),e._v(" is not set then "),n("code",[e._v("word")]),e._v(" will be the result.")]),e._v(" "),n("li",[n("code",[e._v("${variable:+word}")]),e._v(" indicates that if "),n("code",[e._v("variable")]),e._v(" is set then "),n("code",[e._v("word")]),e._v(" will be\nthe result, otherwise the result is the empty string.")])]),e._v(" "),n("p",[e._v("In all cases, "),n("code",[e._v("word")]),e._v(" can be any string, including additional environment\nvariables.")]),e._v(" "),n("p",[e._v("Escaping is possible by adding a "),n("code",[e._v("\\")]),e._v(" before the variable: "),n("code",[e._v("\\$foo")]),e._v(" or "),n("code",[e._v("\\${foo}")]),e._v(",\nfor example, will translate to "),n("code",[e._v("$foo")]),e._v(" and "),n("code",[e._v("${foo}")]),e._v(" literals respectively.")]),e._v(" "),n("p",[e._v("Example (parsed representation is displayed after the "),n("code",[e._v("#")]),e._v("):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("FROM busybox\nENV foo /bar\nWORKDIR ${foo}   # WORKDIR /bar\nADD . $foo       # ADD . /bar\nCOPY \\$foo /quux # COPY $foo /quux\n")])])]),n("p",[e._v("Environment variables are supported by the following list of instructions in\nthe "),n("code",[e._v("Dockerfile")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("ADD")])]),e._v(" "),n("li",[n("code",[e._v("COPY")])]),e._v(" "),n("li",[n("code",[e._v("ENV")])]),e._v(" "),n("li",[n("code",[e._v("EXPOSE")])]),e._v(" "),n("li",[n("code",[e._v("FROM")])]),e._v(" "),n("li",[n("code",[e._v("LABEL")])]),e._v(" "),n("li",[n("code",[e._v("STOPSIGNAL")])]),e._v(" "),n("li",[n("code",[e._v("USER")])]),e._v(" "),n("li",[n("code",[e._v("VOLUME")])]),e._v(" "),n("li",[n("code",[e._v("WORKDIR")])])]),e._v(" "),n("p",[e._v("as well as:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("ONBUILD")]),e._v(" (when combined with one of the supported instructions above)")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nprior to 1.4, "),n("code",[e._v("ONBUILD")]),e._v(" instructions did "),n("strong",[e._v("NOT")]),e._v(" support environment\nvariable, even when combined with any of the instructions listed above.")])]),e._v(" "),n("p",[e._v("Environment variable substitution will use the same value for each variable\nthroughout the entire instruction. In other words, in this example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ENV abc=hello\nENV abc=bye def=$abc\nENV ghi=$abc\n")])])]),n("p",[e._v("will result in "),n("code",[e._v("def")]),e._v(" having a value of "),n("code",[e._v("hello")]),e._v(", not "),n("code",[e._v("bye")]),e._v(". However,\n"),n("code",[e._v("ghi")]),e._v(" will have a value of "),n("code",[e._v("bye")]),e._v(" because it is not part of the same instruction\nthat set "),n("code",[e._v("abc")]),e._v(" to "),n("code",[e._v("bye")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"dockerignore-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerignore-file"}},[e._v("#")]),e._v(" .dockerignore file")]),e._v(" "),n("p",[e._v("Before the docker CLI sends the context to the docker daemon, it looks\nfor a file named "),n("code",[e._v(".dockerignore")]),e._v(" in the root directory of the context.\nIf this file exists, the CLI modifies the context to exclude files and\ndirectories that match patterns in it.  This helps to avoid\nunnecessarily sending large or sensitive files and directories to the\ndaemon and potentially adding them to images using "),n("code",[e._v("ADD")]),e._v(" or "),n("code",[e._v("COPY")]),e._v(".")]),e._v(" "),n("p",[e._v("The CLI interprets the "),n("code",[e._v(".dockerignore")]),e._v(" file as a newline-separated\nlist of patterns similar to the file globs of Unix shells.  For the\npurposes of matching, the root of the context is considered to be both\nthe working and the root directory.  For example, the patterns\n"),n("code",[e._v("/foo/bar")]),e._v(" and "),n("code",[e._v("foo/bar")]),e._v(" both exclude a file or directory named "),n("code",[e._v("bar")]),e._v("\nin the "),n("code",[e._v("foo")]),e._v(" subdirectory of "),n("code",[e._v("PATH")]),e._v(" or in the root of the git\nrepository located at "),n("code",[e._v("URL")]),e._v(".  Neither excludes anything else.")]),e._v(" "),n("p",[e._v("If a line in "),n("code",[e._v(".dockerignore")]),e._v(" file starts with "),n("code",[e._v("#")]),e._v(" in column 1, then this line is\nconsidered as a comment and is ignored before interpreted by the CLI.")]),e._v(" "),n("p",[e._v("Here is an example "),n("code",[e._v(".dockerignore")]),e._v(" file:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# comment\n*/temp*\n*/*/temp*\ntemp?\n")])])]),n("p",[e._v("This file causes the following build behavior:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("Rule")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("Behavior")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("# comment")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Ignored.")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("*/temp*")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Exclude files and directories whose names start with "),n("code",[e._v("temp")]),e._v(" in any immediate subdirectory of the root.  For example, the plain file "),n("code",[e._v("/somedir/temporary.txt")]),e._v(" is excluded, as is the directory "),n("code",[e._v("/somedir/temp")]),e._v(".")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("*/*/temp*")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Exclude files and directories starting with "),n("code",[e._v("temp")]),e._v(" from any subdirectory that is two levels below the root. For example, "),n("code",[e._v("/somedir/subdir/temporary.txt")]),e._v(" is excluded.")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("code",[e._v("temp?")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Exclude files and directories in the root directory whose names are a one-character extension of "),n("code",[e._v("temp")]),e._v(".  For example, "),n("code",[e._v("/tempa")]),e._v(" and "),n("code",[e._v("/tempb")]),e._v(" are excluded.")])])])]),e._v(" "),n("p",[e._v("Matching is done using Go's\n"),n("a",{attrs:{href:"http://golang.org/pkg/path/filepath#Match",target:"_blank",rel:"noopener noreferrer"}},[e._v("filepath.Match"),n("OutboundLink")],1),e._v(" rules.  A\npreprocessing step removes leading and trailing whitespace and\neliminates "),n("code",[e._v(".")]),e._v(" and "),n("code",[e._v("..")]),e._v(" elements using Go's\n"),n("a",{attrs:{href:"http://golang.org/pkg/path/filepath/#Clean",target:"_blank",rel:"noopener noreferrer"}},[e._v("filepath.Clean"),n("OutboundLink")],1),e._v(".  Lines\nthat are blank after preprocessing are ignored.")]),e._v(" "),n("p",[e._v("Beyond Go's filepath.Match rules, Docker also supports a special\nwildcard string "),n("code",[e._v("**")]),e._v(" that matches any number of directories (including\nzero). For example, "),n("code",[e._v("**/*.go")]),e._v(" will exclude all files that end with "),n("code",[e._v(".go")]),e._v("\nthat are found in all directories, including the root of the build context.")]),e._v(" "),n("p",[e._v("Lines starting with "),n("code",[e._v("!")]),e._v(" (exclamation mark) can be used to make exceptions\nto exclusions.  The following is an example "),n("code",[e._v(".dockerignore")]),e._v(" file that\nuses this mechanism:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    *.md\n    !README.md\n")])])]),n("p",[e._v("All markdown files "),n("em",[e._v("except")]),e._v(" "),n("code",[e._v("README.md")]),e._v(" are excluded from the context.")]),e._v(" "),n("p",[e._v("The placement of "),n("code",[e._v("!")]),e._v(" exception rules influences the behavior: the last\nline of the "),n("code",[e._v(".dockerignore")]),e._v(" that matches a particular file determines\nwhether it is included or excluded.  Consider the following example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    *.md\n    !README*.md\n    README-secret.md\n")])])]),n("p",[e._v("No markdown files are included in the context except README files other than\n"),n("code",[e._v("README-secret.md")]),e._v(".")]),e._v(" "),n("p",[e._v("Now consider this example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    *.md\n    README-secret.md\n    !README*.md\n")])])]),n("p",[e._v("All of the README files are included.  The middle line has no effect because\n"),n("code",[e._v("!README*.md")]),e._v(" matches "),n("code",[e._v("README-secret.md")]),e._v(" and comes last.")]),e._v(" "),n("p",[e._v("You can even use the "),n("code",[e._v(".dockerignore")]),e._v(" file to exclude the "),n("code",[e._v("Dockerfile")]),e._v("\nand "),n("code",[e._v(".dockerignore")]),e._v(" files.  These files are still sent to the daemon\nbecause it needs them to do its job.  But the "),n("code",[e._v("ADD")]),e._v(" and "),n("code",[e._v("COPY")]),e._v(" instructions\ndo not copy them to the image.")]),e._v(" "),n("p",[e._v("Finally, you may want to specify which files to include in the\ncontext, rather than which to exclude. To achieve this, specify "),n("code",[e._v("*")]),e._v(" as\nthe first pattern, followed by one or more "),n("code",[e._v("!")]),e._v(" exception patterns.")]),e._v(" "),n("p",[n("strong",[e._v("Note")]),e._v(": For historical reasons, the pattern "),n("code",[e._v(".")]),e._v(" is ignored.")]),e._v(" "),n("h2",{attrs:{id:"from"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[e._v("#")]),e._v(" FROM")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("FROM <image> [AS <name>]\n")])])]),n("p",[e._v("Or")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("FROM <image>[:<tag>] [AS <name>]\n")])])]),n("p",[e._v("Or")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("FROM <image>[@<digest>] [AS <name>]\n")])])]),n("p",[e._v("The "),n("code",[e._v("FROM")]),e._v(" instruction initializes a new build stage and sets the\n"),n("RouterLink",{attrs:{to:"/docs/docker/glossary.html#base-image"}},[n("em",[e._v("Base Image")])]),e._v(" for subsequent instructions. As such, a\nvalid "),n("code",[e._v("Dockerfile")]),e._v(" must start with a "),n("code",[e._v("FROM")]),e._v(" instruction. The image can be\nany valid image – it is especially easy to start by "),n("strong",[e._v("pulling an image")]),e._v(" from\nthe "),n("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockerrepos/",target:"_blank",rel:"noopener noreferrer"}},[n("em",[e._v("Public Repositories")]),n("OutboundLink")],1),e._v(".")],1),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("ARG")]),e._v(" is the only instruction that may precede "),n("code",[e._v("FROM")]),e._v(" in the "),n("code",[e._v("Dockerfile")]),e._v(".\nSee "),n("a",{attrs:{href:"#understand-how-arg-and-from-interact"}},[e._v("Understand how ARG and FROM interact")]),e._v(".")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("FROM")]),e._v(" can appear multiple times within a single "),n("code",[e._v("Dockerfile")]),e._v(" to\ncreate multiple images or use one build stage as a dependency for another.\nSimply make a note of the last image ID output by the commit before each new\n"),n("code",[e._v("FROM")]),e._v(" instruction. Each "),n("code",[e._v("FROM")]),e._v(" instruction clears any state created by previous\ninstructions.")])]),e._v(" "),n("li",[n("p",[e._v("Optionally a name can be given to a new build stage by adding "),n("code",[e._v("AS name")]),e._v(" to the\n"),n("code",[e._v("FROM")]),e._v(" instruction. The name can be used in subsequent "),n("code",[e._v("FROM")]),e._v(" and\n"),n("code",[e._v("COPY --from=<name|index>")]),e._v(" instructions to refer to the image built in this stage.")])]),e._v(" "),n("li",[n("p",[e._v("The "),n("code",[e._v("tag")]),e._v(" or "),n("code",[e._v("digest")]),e._v(" values are optional. If you omit either of them, the\nbuilder assumes a "),n("code",[e._v("latest")]),e._v(" tag by default. The builder returns an error if it\ncannot find the "),n("code",[e._v("tag")]),e._v(" value.")])])]),e._v(" "),n("h3",{attrs:{id:"understand-how-arg-and-from-interact"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#understand-how-arg-and-from-interact"}},[e._v("#")]),e._v(" Understand how ARG and FROM interact")]),e._v(" "),n("p",[n("code",[e._v("FROM")]),e._v(" instructions support variables that are declared by any "),n("code",[e._v("ARG")]),e._v("\ninstructions that occur before the first "),n("code",[e._v("FROM")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ARG")]),e._v("  CODE_VERSION=latest\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" base"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("CODE_VERSION"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v("  /code/run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("app\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" extras"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("CODE_VERSION"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CMD")]),e._v("  /code/run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("extras\n")])])]),n("p",[e._v("An "),n("code",[e._v("ARG")]),e._v(" declared before a "),n("code",[e._v("FROM")]),e._v(" is outside of a build stage, so it\ncan't be used in any instruction after a "),n("code",[e._v("FROM")]),e._v(". To use the default value of\nan "),n("code",[e._v("ARG")]),e._v(" declared before the first "),n("code",[e._v("FROM")]),e._v(" use an "),n("code",[e._v("ARG")]),e._v(" instruction without\na value inside of a build stage:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ARG")]),e._v(" VERSION=latest\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" busybox"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("$VERSION\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ARG")]),e._v(" VERSION\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo $VERSION "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),e._v(" image_version\n")])])]),n("h2",{attrs:{id:"run"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[e._v("#")]),e._v(" RUN")]),e._v(" "),n("p",[e._v("RUN has 2 forms:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("RUN <command>")]),e._v(" ("),n("em",[e._v("shell")]),e._v(" form, the command is run in a shell, which by\ndefault is "),n("code",[e._v("/bin/sh -c")]),e._v(" on Linux or "),n("code",[e._v("cmd /S /C")]),e._v(" on Windows)")]),e._v(" "),n("li",[n("code",[e._v('RUN ["executable", "param1", "param2"]')]),e._v(" ("),n("em",[e._v("exec")]),e._v(" form)")])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("RUN")]),e._v(" instruction will execute any commands in a new layer on top of the\ncurrent image and commit the results. The resulting committed image will be\nused for the next step in the "),n("code",[e._v("Dockerfile")]),e._v(".")]),e._v(" "),n("p",[e._v("Layering "),n("code",[e._v("RUN")]),e._v(" instructions and generating commits conforms to the core\nconcepts of Docker where commits are cheap and containers can be created from\nany point in an image's history, much like source control.")]),e._v(" "),n("p",[e._v("The "),n("em",[e._v("exec")]),e._v(" form makes it possible to avoid shell string munging, and to "),n("code",[e._v("RUN")]),e._v("\ncommands using a base image that does not contain the specified shell executable.")]),e._v(" "),n("p",[e._v("The default shell for the "),n("em",[e._v("shell")]),e._v(" form can be changed using the "),n("code",[e._v("SHELL")]),e._v("\ncommand.")]),e._v(" "),n("p",[e._v("In the "),n("em",[e._v("shell")]),e._v(" form you can use a "),n("code",[e._v("\\")]),e._v(" (backslash) to continue a single\nRUN instruction onto the next line. For example, consider these two lines:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("RUN /bin/bash -c 'source $HOME/.bashrc; \\\necho $HOME'\n")])])]),n("p",[e._v("Together they are equivalent to this single line:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("RUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME'\n")])])]),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nTo use a different shell, other than '/bin/sh', use the "),n("em",[e._v("exec")]),e._v(" form\npassing in the desired shell. For example,\n"),n("code",[e._v('RUN ["/bin/bash", "-c", "echo hello"]')])])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe "),n("em",[e._v("exec")]),e._v(" form is parsed as a JSON array, which means that\nyou must use double-quotes (\") around words not single-quotes (').")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nUnlike the "),n("em",[e._v("shell")]),e._v(" form, the "),n("em",[e._v("exec")]),e._v(" form does not invoke a command shell.\nThis means that normal shell processing does not happen. For example,\n"),n("code",[e._v('RUN [ "echo", "$HOME" ]')]),e._v(" will not do variable substitution on "),n("code",[e._v("$HOME")]),e._v(".\nIf you want shell processing then either use the "),n("em",[e._v("shell")]),e._v(" form or execute\na shell directly, for example: "),n("code",[e._v('RUN [ "sh", "-c", "echo $HOME" ]')]),e._v(".\nWhen using the exec form and executing a shell directly, as in the case for\nthe shell form, it is the shell that is doing the environment variable\nexpansion, not docker.")]),e._v(" "),n("p",[n("strong",[e._v("Note")]),e._v(":\nIn the "),n("em",[e._v("JSON")]),e._v(" form, it is necessary to escape backslashes. This is\nparticularly relevant on Windows where the backslash is the path separator.\nThe following line would otherwise be treated as "),n("em",[e._v("shell")]),e._v(" form due to not\nbeing valid JSON, and fail in an unexpected way:\n"),n("code",[e._v('RUN ["c:\\windows\\system32\\tasklist.exe"]')]),e._v("\nThe correct syntax for this example is:\n"),n("code",[e._v('RUN ["c:\\\\windows\\\\system32\\\\tasklist.exe"]')])])]),e._v(" "),n("p",[e._v("The cache for "),n("code",[e._v("RUN")]),e._v(" instructions isn't invalidated automatically during\nthe next build. The cache for an instruction like\n"),n("code",[e._v("RUN apt-get dist-upgrade -y")]),e._v(" will be reused during the next build. The\ncache for "),n("code",[e._v("RUN")]),e._v(" instructions can be invalidated by using the "),n("code",[e._v("--no-cache")]),e._v("\nflag, for example "),n("code",[e._v("docker build --no-cache")]),e._v(".")]),e._v(" "),n("p",[e._v("See the "),n("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#/build-cache",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Dockerfile")]),e._v(" Best Practices\nguide"),n("OutboundLink")],1),e._v(" for more information.")]),e._v(" "),n("p",[e._v("The cache for "),n("code",[e._v("RUN")]),e._v(" instructions can be invalidated by "),n("code",[e._v("ADD")]),e._v(" instructions. See\n"),n("a",{attrs:{href:"#add"}},[e._v("below")]),e._v(" for details.")]),e._v(" "),n("h3",{attrs:{id:"known-issues-run"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#known-issues-run"}},[e._v("#")]),e._v(" Known issues (RUN)")]),e._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://github.com/docker/docker/issues/783",target:"_blank",rel:"noopener noreferrer"}},[e._v("Issue 783"),n("OutboundLink")],1),e._v(" is about file\npermissions problems that can occur when using the AUFS file system. You\nmight notice it during an attempt to "),n("code",[e._v("rm")]),e._v(" a file, for example.")]),e._v(" "),n("p",[e._v("For systems that have recent aufs version (i.e., "),n("code",[e._v("dirperm1")]),e._v(" mount option can\nbe set), docker will attempt to fix the issue automatically by mounting\nthe layers with "),n("code",[e._v("dirperm1")]),e._v(" option. More details on "),n("code",[e._v("dirperm1")]),e._v(" option can be\nfound at "),n("a",{attrs:{href:"https://github.com/sfjro/aufs3-linux/tree/aufs3.18/Documentation/filesystems/aufs",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("aufs")]),e._v(" man page"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("If your system doesn't have support for "),n("code",[e._v("dirperm1")]),e._v(", the issue describes a workaround.")])])]),e._v(" "),n("h2",{attrs:{id:"cmd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("CMD")]),e._v(" instruction has three forms:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v('CMD ["executable","param1","param2"]')]),e._v(" ("),n("em",[e._v("exec")]),e._v(" form, this is the preferred form)")]),e._v(" "),n("li",[n("code",[e._v('CMD ["param1","param2"]')]),e._v(" (as "),n("em",[e._v("default parameters to ENTRYPOINT")]),e._v(")")]),e._v(" "),n("li",[n("code",[e._v("CMD command param1 param2")]),e._v(" ("),n("em",[e._v("shell")]),e._v(" form)")])]),e._v(" "),n("p",[e._v("There can only be one "),n("code",[e._v("CMD")]),e._v(" instruction in a "),n("code",[e._v("Dockerfile")]),e._v(". If you list more than one "),n("code",[e._v("CMD")]),e._v("\nthen only the last "),n("code",[e._v("CMD")]),e._v(" will take effect.")]),e._v(" "),n("p",[n("strong",[e._v("The main purpose of a "),n("code",[e._v("CMD")]),e._v(" is to provide defaults for an executing\ncontainer.")]),e._v(" These defaults can include an executable, or they can omit\nthe executable, in which case you must specify an "),n("code",[e._v("ENTRYPOINT")]),e._v("\ninstruction as well.")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nIf "),n("code",[e._v("CMD")]),e._v(" is used to provide default arguments for the "),n("code",[e._v("ENTRYPOINT")]),e._v("\ninstruction, both the "),n("code",[e._v("CMD")]),e._v(" and "),n("code",[e._v("ENTRYPOINT")]),e._v(" instructions should be specified\nwith the JSON array format.")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe "),n("em",[e._v("exec")]),e._v(" form is parsed as a JSON array, which means that\nyou must use double-quotes (\") around words not single-quotes (').")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nUnlike the "),n("em",[e._v("shell")]),e._v(" form, the "),n("em",[e._v("exec")]),e._v(" form does not invoke a command shell.\nThis means that normal shell processing does not happen. For example,\n"),n("code",[e._v('CMD [ "echo", "$HOME" ]')]),e._v(" will not do variable substitution on "),n("code",[e._v("$HOME")]),e._v(".\nIf you want shell processing then either use the "),n("em",[e._v("shell")]),e._v(" form or execute\na shell directly, for example: "),n("code",[e._v('CMD [ "sh", "-c", "echo $HOME" ]')]),e._v(".\nWhen using the exec form and executing a shell directly, as in the case for\nthe shell form, it is the shell that is doing the environment variable\nexpansion, not docker.")])]),e._v(" "),n("p",[e._v("When used in the shell or exec formats, the "),n("code",[e._v("CMD")]),e._v(" instruction sets the command\nto be executed when running the image.")]),e._v(" "),n("p",[e._v("If you use the "),n("em",[e._v("shell")]),e._v(" form of the "),n("code",[e._v("CMD")]),e._v(", then the "),n("code",[e._v("<command>")]),e._v(" will execute in\n"),n("code",[e._v("/bin/sh -c")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('FROM ubuntu\nCMD echo "This is a test." | wc -\n')])])]),n("p",[e._v("If you want to "),n("strong",[e._v("run your")]),e._v(" "),n("code",[e._v("<command>")]),e._v(" "),n("strong",[e._v("without a shell")]),e._v(" then you must\nexpress the command as a JSON array and give the full path to the executable.\n"),n("strong",[e._v("This array form is the preferred format of "),n("code",[e._v("CMD")]),e._v(".")]),e._v(" Any additional parameters\nmust be individually expressed as strings in the array:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('FROM ubuntu\nCMD ["/usr/bin/wc","--help"]\n')])])]),n("p",[e._v("If you would like your container to run the same executable every time, then\nyou should consider using "),n("code",[e._v("ENTRYPOINT")]),e._v(" in combination with "),n("code",[e._v("CMD")]),e._v(". See\n"),n("a",{attrs:{href:"#entrypoint"}},[n("em",[e._v("ENTRYPOINT")])]),e._v(".")]),e._v(" "),n("p",[e._v("If the user specifies arguments to "),n("code",[e._v("docker run")]),e._v(" then they will override the\ndefault specified in "),n("code",[e._v("CMD")]),e._v(".")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nDon't confuse "),n("code",[e._v("RUN")]),e._v(" with "),n("code",[e._v("CMD")]),e._v(". "),n("code",[e._v("RUN")]),e._v(" actually runs a command and commits\nthe result; "),n("code",[e._v("CMD")]),e._v(" does not execute anything at build time, but specifies\nthe intended command for the image.")])]),e._v(" "),n("h2",{attrs:{id:"label"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#label"}},[e._v("#")]),e._v(" LABEL")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("LABEL <key>=<value> <key>=<value> <key>=<value> ...\n")])])]),n("p",[e._v("The "),n("code",[e._v("LABEL")]),e._v(" instruction adds metadata to an image. A "),n("code",[e._v("LABEL")]),e._v(" is a\nkey-value pair. To include spaces within a "),n("code",[e._v("LABEL")]),e._v(" value, use quotes and\nbackslashes as you would in command-line parsing. A few usage examples:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('LABEL "com.example.vendor"="ACME Incorporated"\nLABEL com.example.label-with-value="foo"\nLABEL version="1.0"\nLABEL description="This text illustrates \\\nthat label-values can span multiple lines."\n')])])]),n("p",[e._v("An image can have more than one label. You can specify multiple labels on a\nsingle line. Prior to Docker 1.10, this decreased the size of the final image,\nbut this is no longer the case. You may still choose to specify multiple labels\nin a single instruction, in one of the following two ways:")]),e._v(" "),n("div",{staticClass:"language-none extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('LABEL multi.label1="value1" multi.label2="value2" other="value3"\n')])])]),n("div",{staticClass:"language-none extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('LABEL multi.label1="value1" \\\n      multi.label2="value2" \\\n      other="value3"\n')])])]),n("p",[e._v("Labels included in base or parent images (images in the "),n("code",[e._v("FROM")]),e._v(" line) are\ninherited by your image. If a label already exists but with a different value,\nthe most-recently-applied value overrides any previously-set value.")]),e._v(" "),n("p",[e._v("To view an image's labels, use the "),n("code",[e._v("docker inspect")]),e._v(" command.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('"Labels": {\n    "com.example.vendor": "ACME Incorporated"\n    "com.example.label-with-value": "foo",\n    "version": "1.0",\n    "description": "This text illustrates that label-values can span multiple lines.",\n    "multi.label1": "value1",\n    "multi.label2": "value2",\n    "other": "value3"\n},\n')])])]),n("h2",{attrs:{id:"maintainer-deprecated"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maintainer-deprecated"}},[e._v("#")]),e._v(" MAINTAINER (deprecated)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("MAINTAINER <name>\n")])])]),n("p",[e._v("The "),n("code",[e._v("MAINTAINER")]),e._v(" instruction sets the "),n("em",[e._v("Author")]),e._v(" field of the generated images.\nThe "),n("code",[e._v("LABEL")]),e._v(" instruction is a much more flexible version of this and you should use\nit instead, as it enables setting any metadata you require, and can be viewed\neasily, for example with "),n("code",[e._v("docker inspect")]),e._v(". To set a label corresponding to the\n"),n("code",[e._v("MAINTAINER")]),e._v(" field you could use:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('LABEL maintainer="SvenDowideit@home.org.au"\n')])])]),n("p",[e._v("This will then be visible from "),n("code",[e._v("docker inspect")]),e._v(" with the other labels.")]),e._v(" "),n("h2",{attrs:{id:"expose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[e._v("#")]),e._v(" EXPOSE")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("EXPOSE <port> [<port>/<protocol>...]\n")])])]),n("p",[e._v("The "),n("code",[e._v("EXPOSE")]),e._v(" instruction informs Docker that the container listens on the\nspecified network ports at runtime. You can specify whether the port listens on\nTCP or UDP, and the default is TCP if the protocol is not specified.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("EXPOSE")]),e._v(" instruction does not actually publish the port. It functions as a\ntype of documentation between the person who builds the image and the person who\nruns the container, about which ports are intended to be published. To actually\npublish the port when running the container, use the "),n("code",[e._v("-p")]),e._v(" flag on "),n("code",[e._v("docker run")]),e._v("\nto publish and map one or more ports, or the "),n("code",[e._v("-P")]),e._v(" flag to publish all exposed\nports and map them to high-order ports.")]),e._v(" "),n("p",[e._v("By default, "),n("code",[e._v("EXPOSE")]),e._v(" assumes TCP. You can also specify UDP:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("EXPOSE")]),e._v(" 80/udp\n")])])]),n("p",[e._v("To expose on both TCP and UDP, include two lines:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("EXPOSE")]),e._v(" 80/tcp\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("EXPOSE")]),e._v(" 80/udp\n")])])]),n("p",[e._v("In this case, if you use "),n("code",[e._v("-P")]),e._v(" with "),n("code",[e._v("docker run")]),e._v(", the port will be exposed once\nfor TCP and once for UDP. Remember that "),n("code",[e._v("-P")]),e._v(" uses an ephemeral high-ordered host\nport on the host, so the port will not be the same for TCP and UDP.")]),e._v(" "),n("p",[e._v("Regardless of the "),n("code",[e._v("EXPOSE")]),e._v(" settings, you can override them at runtime by using\nthe "),n("code",[e._v("-p")]),e._v(" flag. For example")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("docker run -p "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(":80/tcp -p "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(":80/udp "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),n("p",[e._v("To set up port redirection on the host system, see "),n("RouterLink",{attrs:{to:"/docs/docker/run.html#expose-incoming-ports"}},[e._v("using the -P\nflag")]),e._v(". The "),n("code",[e._v("docker network")]),e._v(" command supports\ncreating networks for communication among containers without the need to\nexpose or publish specific ports, because the containers connected to the\nnetwork can communicate with each other over any port. For detailed information,\nsee the\n"),n("a",{attrs:{href:"https://docs.docker.com/engine/userguide/networking/",target:"_blank",rel:"noopener noreferrer"}},[e._v("overview of this feature"),n("OutboundLink")],1),e._v(").")],1),e._v(" "),n("h2",{attrs:{id:"env"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[e._v("#")]),e._v(" ENV")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ENV <key> <value>\nENV <key>=<value> ...\n")])])]),n("p",[e._v("The "),n("code",[e._v("ENV")]),e._v(" instruction sets the environment variable "),n("code",[e._v("<key>")]),e._v(" to the value\n"),n("code",[e._v("<value>")]),e._v(". This value will be in the environment for all subsequent instructions\nin the build stage and can be "),n("a",{attrs:{href:"#environment-replacement"}},[e._v("replaced inline")]),e._v(" in\nmany as well.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("ENV")]),e._v(" instruction has two forms. The first form, "),n("code",[e._v("ENV <key> <value>")]),e._v(",\nwill set a single variable to a value. The entire string after the first\nspace will be treated as the "),n("code",[e._v("<value>")]),e._v(" - including whitespace characters. The\nvalue will be interpreted for other environment variables, so quote characters\nwill be removed if they are not escaped.")]),e._v(" "),n("p",[e._v("The second form, "),n("code",[e._v("ENV <key>=<value> ...")]),e._v(", allows for multiple variables to\nbe set at one time. Notice that the second form uses the equals sign (=)\nin the syntax, while the first form does not. Like command line parsing,\nquotes and backslashes can be used to include spaces within values.")]),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('ENV myName="John Doe" myDog=Rex\\ The\\ Dog \\\n    myCat=fluffy\n')])])]),n("p",[e._v("and")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ENV myName John Doe\nENV myDog Rex The Dog\nENV myCat fluffy\n")])])]),n("p",[e._v("will yield the same net results in the final image.")]),e._v(" "),n("p",[e._v("The environment variables set using "),n("code",[e._v("ENV")]),e._v(" will persist when a container is run\nfrom the resulting image. You can view the values using "),n("code",[e._v("docker inspect")]),e._v(", and\nchange them using "),n("code",[e._v("docker run --env <key>=<value>")]),e._v(".")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nEnvironment persistence can cause unexpected side effects. For example,\nsetting "),n("code",[e._v("ENV DEBIAN_FRONTEND noninteractive")]),e._v(" may confuse apt-get\nusers on a Debian-based image. To set a value for a single command, use\n"),n("code",[e._v("RUN <key>=<value> <command>")]),e._v(".")])]),e._v(" "),n("h2",{attrs:{id:"add"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[e._v("#")]),e._v(" ADD")]),e._v(" "),n("p",[e._v("ADD has two forms:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("ADD [--chown=<user>:<group>] <src>... <dest>")])]),e._v(" "),n("li",[n("code",[e._v('ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]')]),e._v(" (this form is required for paths containing\nwhitespace)")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe "),n("code",[e._v("--chown")]),e._v(" feature is only supported on Dockerfiles used to build Linux containers,\nand will not work on Windows containers. Since user and group ownership concepts do\nnot translate between Linux and Windows, the use of "),n("code",[e._v("/etc/passwd")]),e._v(" and "),n("code",[e._v("/etc/group")]),e._v(" for\ntranslating user and group names to IDs restricts this feature to only be viable\nfor Linux OS-based containers.")])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("ADD")]),e._v(" instruction copies new files, directories or remote file URLs from "),n("code",[e._v("<src>")]),e._v("\nand adds them to the filesystem of the image at the path "),n("code",[e._v("<dest>")]),e._v(".")]),e._v(" "),n("p",[e._v("Multiple "),n("code",[e._v("<src>")]),e._v(" resources may be specified but if they are files or\ndirectories, their paths are interpreted as relative to the source of\nthe context of the build.")]),e._v(" "),n("p",[e._v("Each "),n("code",[e._v("<src>")]),e._v(" may contain wildcards and matching will be done using Go's\n"),n("a",{attrs:{href:"http://golang.org/pkg/path/filepath#Match",target:"_blank",rel:"noopener noreferrer"}},[e._v("filepath.Match"),n("OutboundLink")],1),e._v(" rules. For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('ADD hom* /mydir/        # adds all files starting with "hom"\nADD hom?.txt /mydir/    # ? is replaced with any single character, e.g., "home.txt"\n')])])]),n("p",[e._v("The "),n("code",[e._v("<dest>")]),e._v(" is an absolute path, or a path relative to "),n("code",[e._v("WORKDIR")]),e._v(", into which\nthe source will be copied inside the destination container.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('ADD test relativeDir/          # adds "test" to `WORKDIR`/relativeDir/\nADD test /absoluteDir/         # adds "test" to /absoluteDir/\n')])])]),n("p",[e._v("When adding files or directories that contain special characters (such as "),n("code",[e._v("[")]),e._v("\nand "),n("code",[e._v("]")]),e._v("), you need to escape those paths following the Golang rules to prevent\nthem from being treated as a matching pattern. For example, to add a file\nnamed "),n("code",[e._v("arr[0].txt")]),e._v(", use the following;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('ADD arr[[]0].txt /mydir/    # copy a file named "arr[0].txt" to /mydir/\n')])])]),n("p",[e._v("All new files and directories are created with a UID and GID of 0, unless the\noptional "),n("code",[e._v("--chown")]),e._v(" flag specifies a given username, groupname, or UID/GID\ncombination to request specific ownership of the content added. The\nformat of the "),n("code",[e._v("--chown")]),e._v(" flag allows for either username and groupname strings\nor direct integer UID and GID in any combination. Providing a username without\ngroupname or a UID without GID will use the same numeric UID as the GID. If a\nusername or groupname is provided, the container's root filesystem\n"),n("code",[e._v("/etc/passwd")]),e._v(" and "),n("code",[e._v("/etc/group")]),e._v(" files will be used to perform the translation\nfrom name to integer UID or GID respectively. The following examples show\nvalid definitions for the "),n("code",[e._v("--chown")]),e._v(" flag:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ADD --chown=55:mygroup files* /somedir/\nADD --chown=bin files* /somedir/\nADD --chown=1 files* /somedir/\nADD --chown=10:11 files* /somedir/\n")])])]),n("p",[e._v("If the container root filesystem does not contain either "),n("code",[e._v("/etc/passwd")]),e._v(" or\n"),n("code",[e._v("/etc/group")]),e._v(" files and either user or group names are used in the "),n("code",[e._v("--chown")]),e._v("\nflag, the build will fail on the "),n("code",[e._v("ADD")]),e._v(" operation. Using numeric IDs requires\nno lookup and will not depend on container root filesystem content.")]),e._v(" "),n("p",[e._v("In the case where "),n("code",[e._v("<src>")]),e._v(" is a remote file URL, the destination will\nhave permissions of 600. If the remote file being retrieved has an HTTP\n"),n("code",[e._v("Last-Modified")]),e._v(" header, the timestamp from that header will be used\nto set the "),n("code",[e._v("mtime")]),e._v(" on the destination file. However, like any other file\nprocessed during an "),n("code",[e._v("ADD")]),e._v(", "),n("code",[e._v("mtime")]),e._v(" will not be included in the determination\nof whether or not the file has changed and the cache should be updated.")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nIf you build by passing a "),n("code",[e._v("Dockerfile")]),e._v(" through STDIN ("),n("code",[e._v("docker build - < somefile")]),e._v("), there is no build context, so the "),n("code",[e._v("Dockerfile")]),e._v("\ncan only contain a URL based "),n("code",[e._v("ADD")]),e._v(" instruction. You can also pass a\ncompressed archive through STDIN: ("),n("code",[e._v("docker build - < archive.tar.gz")]),e._v("),\nthe "),n("code",[e._v("Dockerfile")]),e._v(" at the root of the archive and the rest of the\narchive will be used as the context of the build.")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nIf your URL files are protected using authentication, you\nwill need to use "),n("code",[e._v("RUN wget")]),e._v(", "),n("code",[e._v("RUN curl")]),e._v(" or use another tool from\nwithin the container as the "),n("code",[e._v("ADD")]),e._v(" instruction does not support\nauthentication.")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe first encountered "),n("code",[e._v("ADD")]),e._v(" instruction will invalidate the cache for all\nfollowing instructions from the Dockerfile if the contents of "),n("code",[e._v("<src>")]),e._v(" have\nchanged. This includes invalidating the cache for "),n("code",[e._v("RUN")]),e._v(" instructions.\nSee the "),n("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#/build-cache",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Dockerfile")]),e._v(" Best Practices\nguide"),n("OutboundLink")],1),e._v(" for more information.")])]),e._v(" "),n("p",[n("code",[e._v("ADD")]),e._v(" obeys the following rules:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("The "),n("code",[e._v("<src>")]),e._v(" path must be inside the "),n("em",[e._v("context")]),e._v(" of the build;\nyou cannot "),n("code",[e._v("ADD ../something /something")]),e._v(", because the first step of a\n"),n("code",[e._v("docker build")]),e._v(" is to send the context directory (and subdirectories) to the\ndocker daemon.")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is a URL and "),n("code",[e._v("<dest>")]),e._v(" does not end with a trailing slash, then a\nfile is downloaded from the URL and copied to "),n("code",[e._v("<dest>")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is a URL and "),n("code",[e._v("<dest>")]),e._v(" does end with a trailing slash, then the\nfilename is inferred from the URL and the file is downloaded to\n"),n("code",[e._v("<dest>/<filename>")]),e._v(". For instance, "),n("code",[e._v("ADD http://example.com/foobar /")]),e._v(" would\ncreate the file "),n("code",[e._v("/foobar")]),e._v(". The URL must have a nontrivial path so that an\nappropriate filename can be discovered in this case ("),n("code",[e._v("http://example.com")]),e._v("\nwill not work).")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is a directory, the entire contents of the directory are copied,\nincluding filesystem metadata.")])])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe directory itself is not copied, just its contents.")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is a "),n("em",[e._v("local")]),e._v(" tar archive in a recognized compression format\n(identity, gzip, bzip2 or xz) then it is unpacked as a directory. Resources\nfrom "),n("em",[e._v("remote")]),e._v(" URLs are "),n("strong",[e._v("not")]),e._v(" decompressed. When a directory is copied or\nunpacked, it has the same behavior as "),n("code",[e._v("tar -x")]),e._v(", the result is the union of:")]),e._v(" "),n("ol",[n("li",[e._v("Whatever existed at the destination path and")]),e._v(" "),n("li",[e._v('The contents of the source tree, with conflicts resolved in favor\nof "2." on a file-by-file basis.')])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nWhether a file is identified as a recognized compression format or not\nis done solely based on the contents of the file, not the name of the file.\nFor example, if an empty file happens to end with "),n("code",[e._v(".tar.gz")]),e._v(" this will not\nbe recognized as a compressed file and "),n("strong",[e._v("will not")]),e._v(" generate any kind of\ndecompression error message, rather the file will simply be copied to the\ndestination.")])])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is any other kind of file, it is copied individually along with\nits metadata. In this case, if "),n("code",[e._v("<dest>")]),e._v(" ends with a trailing slash "),n("code",[e._v("/")]),e._v(", it\nwill be considered a directory and the contents of "),n("code",[e._v("<src>")]),e._v(" will be written\nat "),n("code",[e._v("<dest>/base(<src>)")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If multiple "),n("code",[e._v("<src>")]),e._v(" resources are specified, either directly or due to the\nuse of a wildcard, then "),n("code",[e._v("<dest>")]),e._v(" must be a directory, and it must end with\na slash "),n("code",[e._v("/")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<dest>")]),e._v(" does not end with a trailing slash, it will be considered a\nregular file and the contents of "),n("code",[e._v("<src>")]),e._v(" will be written at "),n("code",[e._v("<dest>")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<dest>")]),e._v(" doesn't exist, it is created along with all missing directories\nin its path.")])])]),e._v(" "),n("h2",{attrs:{id:"copy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[e._v("#")]),e._v(" COPY")]),e._v(" "),n("p",[e._v("COPY has two forms:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("COPY [--chown=<user>:<group>] <src>... <dest>")])]),e._v(" "),n("li",[n("code",[e._v('COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]')]),e._v(" (this form is required for paths containing\nwhitespace)")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe "),n("code",[e._v("--chown")]),e._v(" feature is only supported on Dockerfiles used to build Linux containers,\nand will not work on Windows containers. Since user and group ownership concepts do\nnot translate between Linux and Windows, the use of "),n("code",[e._v("/etc/passwd")]),e._v(" and "),n("code",[e._v("/etc/group")]),e._v(" for\ntranslating user and group names to IDs restricts this feature to only be viable for\nLinux OS-based containers.")])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("COPY")]),e._v(" instruction copies new files or directories from "),n("code",[e._v("<src>")]),e._v("\nand adds them to the filesystem of the container at the path "),n("code",[e._v("<dest>")]),e._v(".")]),e._v(" "),n("p",[e._v("Multiple "),n("code",[e._v("<src>")]),e._v(" resources may be specified but the paths of files and\ndirectories will be interpreted as relative to the source of the context\nof the build.")]),e._v(" "),n("p",[e._v("Each "),n("code",[e._v("<src>")]),e._v(" may contain wildcards and matching will be done using Go's\n"),n("a",{attrs:{href:"http://golang.org/pkg/path/filepath#Match",target:"_blank",rel:"noopener noreferrer"}},[e._v("filepath.Match"),n("OutboundLink")],1),e._v(" rules. For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('COPY hom* /mydir/        # adds all files starting with "hom"\nCOPY hom?.txt /mydir/    # ? is replaced with any single character, e.g., "home.txt"\n')])])]),n("p",[e._v("The "),n("code",[e._v("<dest>")]),e._v(" is an absolute path, or a path relative to "),n("code",[e._v("WORKDIR")]),e._v(", into which\nthe source will be copied inside the destination container.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('COPY test relativeDir/   # adds "test" to `WORKDIR`/relativeDir/\nCOPY test /absoluteDir/  # adds "test" to /absoluteDir/\n')])])]),n("p",[e._v("When copying files or directories that contain special characters (such as "),n("code",[e._v("[")]),e._v("\nand "),n("code",[e._v("]")]),e._v("), you need to escape those paths following the Golang rules to prevent\nthem from being treated as a matching pattern. For example, to copy a file\nnamed "),n("code",[e._v("arr[0].txt")]),e._v(", use the following;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('COPY arr[[]0].txt /mydir/    # copy a file named "arr[0].txt" to /mydir/\n')])])]),n("p",[e._v("All new files and directories are created with a UID and GID of 0, unless the\noptional "),n("code",[e._v("--chown")]),e._v(" flag specifies a given username, groupname, or UID/GID\ncombination to request specific ownership of the copied content. The\nformat of the "),n("code",[e._v("--chown")]),e._v(" flag allows for either username and groupname strings\nor direct integer UID and GID in any combination. Providing a username without\ngroupname or a UID without GID will use the same numeric UID as the GID. If a\nusername or groupname is provided, the container's root filesystem\n"),n("code",[e._v("/etc/passwd")]),e._v(" and "),n("code",[e._v("/etc/group")]),e._v(" files will be used to perform the translation\nfrom name to integer UID or GID respectively. The following examples show\nvalid definitions for the "),n("code",[e._v("--chown")]),e._v(" flag:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("COPY --chown=55:mygroup files* /somedir/\nCOPY --chown=bin files* /somedir/\nCOPY --chown=1 files* /somedir/\nCOPY --chown=10:11 files* /somedir/\n")])])]),n("p",[e._v("If the container root filesystem does not contain either "),n("code",[e._v("/etc/passwd")]),e._v(" or\n"),n("code",[e._v("/etc/group")]),e._v(" files and either user or group names are used in the "),n("code",[e._v("--chown")]),e._v("\nflag, the build will fail on the "),n("code",[e._v("COPY")]),e._v(" operation. Using numeric IDs requires\nno lookup and will not depend on container root filesystem content.")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nIf you build using STDIN ("),n("code",[e._v("docker build - < somefile")]),e._v("), there is no\nbuild context, so "),n("code",[e._v("COPY")]),e._v(" can't be used.")])]),e._v(" "),n("p",[e._v("Optionally "),n("code",[e._v("COPY")]),e._v(" accepts a flag "),n("code",[e._v("--from=<name|index>")]),e._v(" that can be used to set\nthe source location to a previous build stage (created with "),n("code",[e._v("FROM .. AS <name>")]),e._v(")\nthat will be used instead of a build context sent by the user. The flag also\naccepts a numeric index assigned for all previous build stages started with\n"),n("code",[e._v("FROM")]),e._v(" instruction. In case a build stage with a specified name can't be found an\nimage with the same name is attempted to be used instead.")]),e._v(" "),n("p",[n("code",[e._v("COPY")]),e._v(" obeys the following rules:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("The "),n("code",[e._v("<src>")]),e._v(" path must be inside the "),n("em",[e._v("context")]),e._v(" of the build;\nyou cannot "),n("code",[e._v("COPY ../something /something")]),e._v(", because the first step of a\n"),n("code",[e._v("docker build")]),e._v(" is to send the context directory (and subdirectories) to the\ndocker daemon.")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is a directory, the entire contents of the directory are copied,\nincluding filesystem metadata.")])])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe directory itself is not copied, just its contents.")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("If "),n("code",[e._v("<src>")]),e._v(" is any other kind of file, it is copied individually along with\nits metadata. In this case, if "),n("code",[e._v("<dest>")]),e._v(" ends with a trailing slash "),n("code",[e._v("/")]),e._v(", it\nwill be considered a directory and the contents of "),n("code",[e._v("<src>")]),e._v(" will be written\nat "),n("code",[e._v("<dest>/base(<src>)")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If multiple "),n("code",[e._v("<src>")]),e._v(" resources are specified, either directly or due to the\nuse of a wildcard, then "),n("code",[e._v("<dest>")]),e._v(" must be a directory, and it must end with\na slash "),n("code",[e._v("/")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<dest>")]),e._v(" does not end with a trailing slash, it will be considered a\nregular file and the contents of "),n("code",[e._v("<src>")]),e._v(" will be written at "),n("code",[e._v("<dest>")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("If "),n("code",[e._v("<dest>")]),e._v(" doesn't exist, it is created along with all missing directories\nin its path.")])])]),e._v(" "),n("h2",{attrs:{id:"entrypoint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[e._v("#")]),e._v(" ENTRYPOINT")]),e._v(" "),n("p",[e._v("ENTRYPOINT has two forms:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v('ENTRYPOINT ["executable", "param1", "param2"]')]),e._v("\n("),n("em",[e._v("exec")]),e._v(" form, preferred)")]),e._v(" "),n("li",[n("code",[e._v("ENTRYPOINT command param1 param2")]),e._v("\n("),n("em",[e._v("shell")]),e._v(" form)")])]),e._v(" "),n("p",[e._v("An "),n("code",[e._v("ENTRYPOINT")]),e._v(" allows you to configure a container that will run as an executable.")]),e._v(" "),n("p",[e._v("For example, the following will start nginx with its default content, listening\non port 80:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("docker run -i -t --rm -p 80:80 nginx\n")])])]),n("p",[e._v("Command line arguments to "),n("code",[e._v("docker run <image>")]),e._v(" will be appended after all\nelements in an "),n("em",[e._v("exec")]),e._v(" form "),n("code",[e._v("ENTRYPOINT")]),e._v(", and will override all elements specified\nusing "),n("code",[e._v("CMD")]),e._v(".\nThis allows arguments to be passed to the entry point, i.e., "),n("code",[e._v("docker run <image> -d")]),e._v("\nwill pass the "),n("code",[e._v("-d")]),e._v(" argument to the entry point.\nYou can override the "),n("code",[e._v("ENTRYPOINT")]),e._v(" instruction using the "),n("code",[e._v("docker run --entrypoint")]),e._v("\nflag.")]),e._v(" "),n("p",[e._v("The "),n("em",[e._v("shell")]),e._v(" form prevents any "),n("code",[e._v("CMD")]),e._v(" or "),n("code",[e._v("run")]),e._v(" command line arguments from being\nused, but has the disadvantage that your "),n("code",[e._v("ENTRYPOINT")]),e._v(" will be started as a\nsubcommand of "),n("code",[e._v("/bin/sh -c")]),e._v(", which does not pass signals.\nThis means that the executable will not be the container's "),n("code",[e._v("PID 1")]),e._v(" - and\nwill "),n("em",[e._v("not")]),e._v(" receive Unix signals - so your executable will not receive a\n"),n("code",[e._v("SIGTERM")]),e._v(" from "),n("code",[e._v("docker stop <container>")]),e._v(".")]),e._v(" "),n("p",[e._v("Only the last "),n("code",[e._v("ENTRYPOINT")]),e._v(" instruction in the "),n("code",[e._v("Dockerfile")]),e._v(" will have an effect.")]),e._v(" "),n("h3",{attrs:{id:"exec-form-entrypoint-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exec-form-entrypoint-example"}},[e._v("#")]),e._v(" Exec form ENTRYPOINT example")]),e._v(" "),n("p",[e._v("You can use the "),n("em",[e._v("exec")]),e._v(" form of "),n("code",[e._v("ENTRYPOINT")]),e._v(" to set fairly stable default commands\nand arguments and then use either form of "),n("code",[e._v("CMD")]),e._v(" to set additional defaults that\nare more likely to be changed.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('FROM ubuntu\nENTRYPOINT ["top", "-b"]\nCMD ["-c"]\n')])])]),n("p",[e._v("When you run the container, you can see that "),n("code",[e._v("top")]),e._v(" is the only process:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker run -it --rm --name test  top -H\ntop - 08:25:00 up  7:27,  0 users,  load average: 0.00, 0.01, 0.05\nThreads:   1 total,   1 running,   0 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:   2056668 total,  1616832 used,   439836 free,    99352 buffers\nKiB Swap:  1441840 total,        0 used,  1441840 free.  1324440 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n    1 root      20   0   19744   2336   2080 R  0.0  0.1   0:00.04 top\n")])])]),n("p",[e._v("To examine the result further, you can use "),n("code",[e._v("docker exec")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker exec -it test ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  2.6  0.1  19752  2352 ?        Ss+  08:24   0:00 top -b -H\nroot         7  0.0  0.1  15572  2164 ?        R+   08:25   0:00 ps aux\n")])])]),n("p",[e._v("And you can gracefully request "),n("code",[e._v("top")]),e._v(" to shut down using "),n("code",[e._v("docker stop test")]),e._v(".")]),e._v(" "),n("p",[e._v("The following "),n("code",[e._v("Dockerfile")]),e._v(" shows using the "),n("code",[e._v("ENTRYPOINT")]),e._v(" to run Apache in the\nforeground (i.e., as "),n("code",[e._v("PID 1")]),e._v("):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('FROM debian:stable\nRUN apt-get update && apt-get install -y --force-yes apache2\nEXPOSE 80 443\nVOLUME ["/var/www", "/var/log/apache2", "/etc/apache2"]\nENTRYPOINT ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]\n')])])]),n("p",[e._v("If you need to write a starter script for a single executable, you can ensure that\nthe final executable receives the Unix signals by using "),n("code",[e._v("exec")]),e._v(" and "),n("code",[e._v("gosu")]),e._v("\ncommands:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" -e\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'postgres'")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" -R postgres "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$PGDATA")]),e._v('"')]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" -z "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -A "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$PGDATA")]),e._v('"')]),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n        gosu postgres initdb\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" gosu postgres "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$@")]),e._v('"')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$@")]),e._v('"')]),e._v("\n")])])]),n("p",[e._v("Lastly, if you need to do some extra cleanup (or communicate with other containers)\non shutdown, or are co-ordinating more than one executable, you may need to ensure\nthat the "),n("code",[e._v("ENTRYPOINT")]),e._v(" script receives the Unix signals, passes them on, and then\ndoes some more work:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#!/bin/sh\n# Note: I\'ve written this using sh so it works in the busybox container too\n\n# USE the trap if you need to also do manual cleanup after the service is stopped,\n#     or need to start multiple services in the one container\ntrap "echo TRAPed signal" HUP INT QUIT TERM\n\n# start service in background here\n/usr/sbin/apachectl start\n\necho "[hit enter key to exit] or run \'docker stop <container>\'"\nread\n\n# stop service and clean up here\necho "stopping apache"\n/usr/sbin/apachectl stop\n\necho "exited $0"\n')])])]),n("p",[e._v("If you run this image with "),n("code",[e._v("docker run -it --rm -p 80:80 --name test apache")]),e._v(",\nyou can then examine the container's processes with "),n("code",[e._v("docker exec")]),e._v(", or "),n("code",[e._v("docker top")]),e._v(",\nand then ask the script to stop Apache:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[e._v("$ docker "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" aux\n"),n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("USER")]),e._v("       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.1")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4448")]),e._v("   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("692")]),e._v(" ?        Ss+  00:42   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /bin/sh /run.sh "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("123")]),e._v(" cmd cmd2\nroot        "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.2")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("71304")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4440")]),e._v(" ?        Ss   00:42   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /usr/sbin/apache2 -k start\nwww-data    "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.2")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.2")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("360468")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("6004")]),e._v(" ?        Sl   00:42   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /usr/sbin/apache2 -k start\nwww-data    "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.2")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.2")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("360468")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("6000")]),e._v(" ?        Sl   00:42   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 /usr/sbin/apache2 -k start\nroot        "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("81")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.1")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("15572")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2140")]),e._v(" ?        R+   00:44   "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(":00 "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" aux\n$ docker "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\nPID                 "),n("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("USER")]),e._v("                COMMAND\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10035")]),e._v("               root                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("run.sh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" /bin/sh /run.sh "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("123")]),e._v(" cmd cmd2\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10054")]),e._v("               root                /usr/sbin/apache2 -k start\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10055")]),e._v("               "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("33")]),e._v("                  /usr/sbin/apache2 -k start\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10056")]),e._v("               "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("33")]),e._v("                  /usr/sbin/apache2 -k start\n$ /usr/bin/time docker stop "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\nreal\t0m "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".27s\nuser\t0m "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".03s\nsys\t0m "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(".03s\n")])])]),n("blockquote",[n("p",[n("strong",[e._v("Note:")]),e._v(" you can override the "),n("code",[e._v("ENTRYPOINT")]),e._v(" setting using "),n("code",[e._v("--entrypoint")]),e._v(",\nbut this can only set the binary to "),n("em",[e._v("exec")]),e._v(" (no "),n("code",[e._v("sh -c")]),e._v(" will be used).")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nThe "),n("em",[e._v("exec")]),e._v(" form is parsed as a JSON array, which means that\nyou must use double-quotes (\") around words not single-quotes (').")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(":\nUnlike the "),n("em",[e._v("shell")]),e._v(" form, the "),n("em",[e._v("exec")]),e._v(" form does not invoke a command shell.\nThis means that normal shell processing does not happen. For example,\n"),n("code",[e._v('ENTRYPOINT [ "echo", "$HOME" ]')]),e._v(" will not do variable substitution on "),n("code",[e._v("$HOME")]),e._v(".\nIf you want shell processing then either use the "),n("em",[e._v("shell")]),e._v(" form or execute\na shell directly, for example: "),n("code",[e._v('ENTRYPOINT [ "sh", "-c", "echo $HOME" ]')]),e._v(".\nWhen using the exec form and executing a shell directly, as in the case for\nthe shell form, it is the shell that is doing the environment variable\nexpansion, not docker.")])]),e._v(" "),n("h3",{attrs:{id:"shell-form-entrypoint-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shell-form-entrypoint-example"}},[e._v("#")]),e._v(" Shell form ENTRYPOINT example")]),e._v(" "),n("p",[e._v("You can specify a plain string for the "),n("code",[e._v("ENTRYPOINT")]),e._v(" and it will execute in "),n("code",[e._v("/bin/sh -c")]),e._v(".\nThis form will use shell processing to substitute shell environment variables,\nand will ignore any "),n("code",[e._v("CMD")]),e._v(" or "),n("code",[e._v("docker run")]),e._v(" command line arguments.\nTo ensure that "),n("code",[e._v("docker stop")]),e._v(" will signal any long running "),n("code",[e._v("ENTRYPOINT")]),e._v(" executable\ncorrectly, you need to remember to start it with "),n("code",[e._v("exec")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("FROM ubuntu\nENTRYPOINT exec top -b\n")])])]),n("p",[e._v("When you run this image, you'll see the single "),n("code",[e._v("PID 1")]),e._v(" process:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker run -it --rm --name test top\nMem: 1704520K used, 352148K free, 0K shrd, 0K buff, 140368121167873K cached\nCPU:   5% usr   0% sys   0% nic  94% idle   0% io   0% irq   0% sirq\nLoad average: 0.08 0.03 0.05 2/98 6\n  PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND\n    1     0 root     R     3164   0%   0% top -b\n")])])]),n("p",[e._v("Which will exit cleanly on "),n("code",[e._v("docker stop")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ /usr/bin/time docker stop test\ntest\nreal\t0m 0.20s\nuser\t0m 0.02s\nsys\t0m 0.04s\n")])])]),n("p",[e._v("If you forget to add "),n("code",[e._v("exec")]),e._v(" to the beginning of your "),n("code",[e._v("ENTRYPOINT")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("FROM ubuntu\nENTRYPOINT top -b\nCMD --ignored-param1\n")])])]),n("p",[e._v("You can then run it (giving it a name for the next step):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker run -it --name test top --ignored-param2\nMem: 1704184K used, 352484K free, 0K shrd, 0K buff, 140621524238337K cached\nCPU:   9% usr   2% sys   0% nic  88% idle   0% io   0% irq   0% sirq\nLoad average: 0.01 0.02 0.05 2/101 7\n  PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND\n    1     0 root     S     3168   0%   0% /bin/sh -c top -b cmd cmd2\n    7     1 root     R     3164   0%   0% top -b\n")])])]),n("p",[e._v("You can see from the output of "),n("code",[e._v("top")]),e._v(" that the specified "),n("code",[e._v("ENTRYPOINT")]),e._v(" is not "),n("code",[e._v("PID 1")]),e._v(".")]),e._v(" "),n("p",[e._v("If you then run "),n("code",[e._v("docker stop test")]),e._v(", the container will not exit cleanly - the\n"),n("code",[e._v("stop")]),e._v(" command will be forced to send a "),n("code",[e._v("SIGKILL")]),e._v(" after the timeout:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$ docker exec -it test ps aux\nPID   USER     COMMAND\n    1 root     /bin/sh -c top -b cmd cmd2\n    7 root     top -b\n    8 root     ps aux\n$ /usr/bin/time docker stop test\ntest\nreal\t0m 10.19s\nuser\t0m 0.04s\nsys\t0m 0.03s\n")])])]),n("h3",{attrs:{id:"understand-how-cmd-and-entrypoint-interact"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#understand-how-cmd-and-entrypoint-interact"}},[e._v("#")]),e._v(" Understand how CMD and ENTRYPOINT interact")]),e._v(" "),n("p",[e._v("Both "),n("code",[e._v("CMD")]),e._v(" and "),n("code",[e._v("ENTRYPOINT")]),e._v(" instructions define what command gets executed when running a container.\nThere are few rules that describe their co-operation.")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Dockerfile should specify at least one of "),n("code",[e._v("CMD")]),e._v(" or "),n("code",[e._v("ENTRYPOINT")]),e._v(" commands.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("ENTRYPOINT")]),e._v(" should be defined when using the container as an executable.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("CMD")]),e._v(" should be used as a way of defining default arguments for an "),n("code",[e._v("ENTRYPOINT")]),e._v(" command\nor for executing an ad-hoc command in a container.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("CMD")]),e._v(" will be overridden when running the container with alternative arguments.")])])]),e._v(" "),n("p",[e._v("The table below shows what command is executed for different "),n("code",[e._v("ENTRYPOINT")]),e._v(" / "),n("code",[e._v("CMD")]),e._v(" combinations:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}}),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("No ENTRYPOINT")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("ENTRYPOINT exec_entry p1_entry")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v('ENTRYPOINT ["exec_entry", "p1_entry"]')])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[e._v("No CMD")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[n("em",[e._v("error, not allowed")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("/bin/sh -c exec_entry p1_entry")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("exec_entry p1_entry")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[e._v('CMD ["exec_cmd", "p1_cmd"]')])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("exec_cmd p1_cmd")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("/bin/sh -c exec_entry p1_entry")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("exec_entry p1_entry exec_cmd p1_cmd")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[e._v('CMD ["p1_cmd", "p2_cmd"]')])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("p1_cmd p2_cmd")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("/bin/sh -c exec_entry p1_entry")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("exec_entry p1_entry p1_cmd p2_cmd")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[e._v("CMD exec_cmd p1_cmd")])]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("/bin/sh -c exec_cmd p1_cmd")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("/bin/sh -c exec_entry p1_entry")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd")])])])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Note")]),e._v(": If "),n("code",[e._v("CMD")]),e._v(" is defined from the base image, setting "),n("code",[e._v("ENTRYPOINT")]),e._v(" will\nreset "),n("code",[e._v("CMD")]),e._v(" to an empty value. In this scenario, "),n("code",[e._v("CMD")]),e._v(" must be defined in the\ncurrent image to have a value.")])]),e._v(" "),n("h2",{attrs:{id:"volume"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[e._v("#")]),e._v(" VOLUME")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('VOLUME ["/data"]\n')])])]),n("p",[e._v("The "),n("code",[e._v("VOLUME")]),e._v(" instruction creates a mount point with the specified name\nand marks it as holding externally mounted volumes from native host or other\ncontainers. The value can be a JSON array, "),n("code",[e._v('VOLUME ["/var/log/"]')]),e._v(", or a plain\nstring with multiple arguments, such as "),n("code",[e._v("VOLUME /var/log")]),e._v(" or "),n("code",[e._v("VOLUME /var/log /var/db")]),e._v(". For more information/examples and mounting instructions via the\nDocker client, refer to\n"),n("a",{attrs:{href:"https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-host-directory-as-a-data-volume",target:"_blank",rel:"noopener noreferrer"}},[n("em",[e._v("Share Directories via Volumes")]),n("OutboundLink")],1),e._v("\ndocumentation.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("docker run")]),e._v(" command initializes the newly created volume with any data\nthat exists at the specified location within the base image. For example,\nconsider the following Dockerfile snippet:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('FROM ubuntu\nRUN mkdir /myvol\nRUN echo "hello world" > /myvol/greeting\nVOLUME /myvol\n')])])]),n("p",[e._v("This Dockerfile results in an image that causes "),n("code",[e._v("docker run")]),e._v(" to\ncreate a new mount point at "),n("code",[e._v("/myvol")]),e._v(" and copy the  "),n("code",[e._v("greeting")]),e._v(" file\ninto the newly created volume.")]),e._v(" "),n("h3",{attrs:{id:"notes-about-specifying-volumes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notes-about-specifying-volumes"}},[e._v("#")]),e._v(" Notes about specifying volumes")]),e._v(" "),n("p",[e._v("Keep the following things in mind about volumes in the "),n("code",[e._v("Dockerfile")]),e._v(".")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("Volumes on Windows-based containers")]),e._v(": When using Windows-based containers,\nthe destination of a volume inside the container must be one of:")]),e._v(" "),n("ul",[n("li",[e._v("a non-existing or empty directory")]),e._v(" "),n("li",[e._v("a drive other than "),n("code",[e._v("C:")])])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Changing the volume from within the Dockerfile")]),e._v(": If any build steps change the\ndata within the volume after it has been declared, those changes will be discarded.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("JSON formatting")]),e._v(": The list is parsed as a JSON array.\nYou must enclose words with double quotes ("),n("code",[e._v('"')]),e._v(") rather than single quotes ("),n("code",[e._v("'")]),e._v(").")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("The host directory is declared at container run-time")]),e._v(": The host directory\n(the mountpoint) is, by its nature, host-dependent. This is to preserve image\nportability, since a given host directory can't be guaranteed to be available\non all hosts. For this reason, you can't mount a host directory from\nwithin the Dockerfile. The "),n("code",[e._v("VOLUME")]),e._v(" instruction does not support specifying a "),n("code",[e._v("host-dir")]),e._v("\nparameter.  You must specify the mountpoint when you create or run the container.")])])]),e._v(" "),n("h2",{attrs:{id:"user"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user"}},[e._v("#")]),e._v(" USER")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("USER <user>[:<group>]\n")])])]),n("p",[e._v("or\nUSER "),n("UID",[e._v("[:"),n("GID",[e._v("]")])],1)],1),e._v(" "),n("p",[e._v("The "),n("code",[e._v("USER")]),e._v(" instruction sets the user name (or UID) and optionally the user\ngroup (or GID) to use when running the image and for any "),n("code",[e._v("RUN")]),e._v(", "),n("code",[e._v("CMD")]),e._v(" and\n"),n("code",[e._v("ENTRYPOINT")]),e._v(" instructions that follow it in the "),n("code",[e._v("Dockerfile")]),e._v(".")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Warning")]),e._v(":\nWhen the user doesn't have a primary group then the image (or the next\ninstructions) will be run with the "),n("code",[e._v("root")]),e._v(" group.")])]),e._v(" "),n("blockquote",[n("p",[e._v("On Windows, the user must be created first if it's not a built-in account.\nThis can be done with the "),n("code",[e._v("net user")]),e._v(" command called as part of a Dockerfile.")])]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[e._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" microsoft/windowsservercore\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create Windows user in the container")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" net user /add patrick\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set it for subsequent commands")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("USER")]),e._v(" patrick\n")])])]),n("h2",{attrs:{id:"workdir"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[e._v("#")]),e._v(" WORKDIR")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("WORKDIR /path/to/workdir\n")])])]),n("p",[e._v("The "),n("code",[e._v("WORKDIR")]),e._v(" instruction sets the working directory for any "),n("code",[e._v("RUN")]),e._v(", "),n("code",[e._v("CMD")]),e._v(",\n"),n("code",[e._v("ENTRYPOINT")]),e._v(", "),n("code",[e._v("COPY")]),e._v(" and "),n("code",[e._v("ADD")]),e._v(" instructions that follow it in the "),n("code",[e._v("Dockerfile")]),e._v(".\nIf the "),n("code",[e._v("WORKDIR")]),e._v(" doesn't exist, it will be created even if it's not used in any\nsubsequent "),n("code",[e._v("Dockerfile")]),e._v(" instruction.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("WORKDIR")]),e._v(" instruction can be used multiple times in a "),n("code",[e._v("Dockerfile")]),e._v(". If a\nrelative path is provided, it will be relative to the path of the previous\n"),n("code",[e._v("WORKDIR")]),e._v(" instruction. For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("WORKDIR /a\nWORKDIR b\nWORKDIR c\nRUN pwd\n")])])]),n("p",[e._v("The output of the final "),n("code",[e._v("pwd")]),e._v(" command in this "),n("code",[e._v("Dockerfile")]),e._v(" would be\n"),n("code",[e._v("/a/b/c")]),e._v(".")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("WORKDIR")]),e._v(" instruction can resolve environment variables previously set using\n"),n("code",[e._v("ENV")]),e._v(". You can only use environment variables explicitly set in the "),n("code",[e._v("Dockerfile")]),e._v(".\nFor example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ENV DIRPATH /path\nWORKDIR $DIRPATH/$DIRNAME\nRUN pwd\n")])])]),n("p",[e._v("The output of the final "),n("code",[e._v("pwd")]),e._v(" command in this "),n("code",[e._v("Dockerfile")]),e._v(" would be\n"),n("code",[e._v("/path/$DIRNAME")])]),e._v(" "),n("h2",{attrs:{id:"arg"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arg"}},[e._v("#")]),e._v(" ARG")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ARG <name>[=<default value>]\n")])])]),n("p",[e._v("The "),n("code",[e._v("ARG")]),e._v(" instruction defines a variable that users can pass at build-time to\nthe builder with the "),n("code",[e._v("docker build")]),e._v(" command using the "),n("code",[e._v("--build-arg <varname>=<value>")]),e._v("\nflag. If a user specifies a build argument that was not\ndefined in the Dockerfile, the build outputs a warning.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[Warning] One or more build-args [foo] were not consumed.\n")])])]),n("p",[e._v("A Dockerfile may include one or more "),n("code",[e._v("ARG")]),e._v(" instructions. For example,\nthe following is a valid Dockerfile:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("FROM busybox\nARG user1\nARG buildno\n...\n")])])]),n("blockquote",[n("p",[n("strong",[e._v("Warning:")]),e._v(" It is not recommended to use build-time variables for\npassing secrets like github keys, user credentials etc. Build-time variable\nvalues are visible to any user of the image with the "),n("code",[e._v("docker history")]),e._v(" command.")])]),e._v(" "),n("h3",{attrs:{id:"default-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#default-values"}},[e._v("#")]),e._v(" Default values")]),e._v(" "),n("p",[e._v("An "),n("code",[e._v("ARG")]),e._v(" instruction can optionally include a default value:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("FROM busybox\nARG user1=someuser\nARG buildno=1\n...\n")])])]),n("p",[e._v("If an "),n("code",[e._v("ARG")]),e._v(" instruction has a default value and if there is no value passed\nat build-time, the builder uses the default.")]),e._v(" "),n("h3",{attrs:{id:"scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[e._v("#")]),e._v(" Scope")]),e._v(" "),n("p",[e._v("An "),n("code",[e._v("ARG")]),e._v(" variable definition comes into effect from the line on which it is\ndefined in the "),n("code",[e._v("Dockerfile")]),e._v(" not from the argument's use on the command-line or\nelsewhere.  For example, consider this Dockerfile:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM busybox\n2 USER ${user:-some_user}\n3 ARG user\n4 USER $user\n...\n")])])]),n("p",[e._v("A user builds this file by calling:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ docker build --build-arg user=what_user .\n")])])]),n("p",[e._v("The "),n("code",[e._v("USER")]),e._v(" at line 2 evaluates to "),n("code",[e._v("some_user")]),e._v(" as the "),n("code",[e._v("user")]),e._v(" variable is defined on the\nsubsequent line 3. The "),n("code",[e._v("USER")]),e._v(" at line 4 evaluates to "),n("code",[e._v("what_user")]),e._v(" as "),n("code",[e._v("user")]),e._v(" is\ndefined and the "),n("code",[e._v("what_user")]),e._v(" value was passed on the command line. Prior to its definition by an\n"),n("code",[e._v("ARG")]),e._v(" instruction, any use of a variable results in an empty string.")]),e._v(" "),n("p",[e._v("An "),n("code",[e._v("ARG")]),e._v(" instruction goes out of scope at the end of the build\nstage where it was defined. To use an arg in multiple stages, each stage must\ninclude the "),n("code",[e._v("ARG")]),e._v(" instruction.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("FROM busybox\nARG SETTINGS\nRUN ./run/setup $SETTINGS\n\nFROM busybox\nARG SETTINGS\nRUN ./run/other $SETTINGS\n")])])]),n("h3",{attrs:{id:"using-arg-variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-arg-variables"}},[e._v("#")]),e._v(" Using ARG variables")]),e._v(" "),n("p",[e._v("You can use an "),n("code",[e._v("ARG")]),e._v(" or an "),n("code",[e._v("ENV")]),e._v(" instruction to specify variables that are\navailable to the "),n("code",[e._v("RUN")]),e._v(" instruction. Environment variables defined using the\n"),n("code",[e._v("ENV")]),e._v(" instruction always override an "),n("code",[e._v("ARG")]),e._v(" instruction of the same name. Consider\nthis Dockerfile with an "),n("code",[e._v("ENV")]),e._v(" and "),n("code",[e._v("ARG")]),e._v(" instruction.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM ubuntu\n2 ARG CONT_IMG_VER\n3 ENV CONT_IMG_VER v1.0.0\n4 RUN echo $CONT_IMG_VER\n")])])]),n("p",[e._v("Then, assume this image is built with this command:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ docker build --build-arg CONT_IMG_VER=v2.0.1 .\n")])])]),n("p",[e._v("In this case, the "),n("code",[e._v("RUN")]),e._v(" instruction uses "),n("code",[e._v("v1.0.0")]),e._v(" instead of the "),n("code",[e._v("ARG")]),e._v(" setting\npassed by the user:"),n("code",[e._v("v2.0.1")]),e._v(" This behavior is similar to a shell\nscript where a locally scoped variable overrides the variables passed as\narguments or inherited from environment, from its point of definition.")]),e._v(" "),n("p",[e._v("Using the example above but a different "),n("code",[e._v("ENV")]),e._v(" specification you can create more\nuseful interactions between "),n("code",[e._v("ARG")]),e._v(" and "),n("code",[e._v("ENV")]),e._v(" instructions:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM ubuntu\n2 ARG CONT_IMG_VER\n3 ENV CONT_IMG_VER ${CONT_IMG_VER:-v1.0.0}\n4 RUN echo $CONT_IMG_VER\n")])])]),n("p",[e._v("Unlike an "),n("code",[e._v("ARG")]),e._v(" instruction, "),n("code",[e._v("ENV")]),e._v(" values are always persisted in the built\nimage. Consider a docker build without the "),n("code",[e._v("--build-arg")]),e._v(" flag:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ docker build .\n")])])]),n("p",[e._v("Using this Dockerfile example, "),n("code",[e._v("CONT_IMG_VER")]),e._v(" is still persisted in the image but\nits value would be "),n("code",[e._v("v1.0.0")]),e._v(" as it is the default set in line 3 by the "),n("code",[e._v("ENV")]),e._v(" instruction.")]),e._v(" "),n("p",[e._v("The variable expansion technique in this example allows you to pass arguments\nfrom the command line and persist them in the final image by leveraging the\n"),n("code",[e._v("ENV")]),e._v(" instruction. Variable expansion is only supported for "),n("a",{attrs:{href:"#environment-replacement"}},[e._v("a limited set of\nDockerfile instructions.")])]),e._v(" "),n("h3",{attrs:{id:"predefined-args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#predefined-args"}},[e._v("#")]),e._v(" Predefined ARGs")]),e._v(" "),n("p",[e._v("Docker has a set of predefined "),n("code",[e._v("ARG")]),e._v(" variables that you can use without a\ncorresponding "),n("code",[e._v("ARG")]),e._v(" instruction in the Dockerfile.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("HTTP_PROXY")])]),e._v(" "),n("li",[n("code",[e._v("http_proxy")])]),e._v(" "),n("li",[n("code",[e._v("HTTPS_PROXY")])]),e._v(" "),n("li",[n("code",[e._v("https_proxy")])]),e._v(" "),n("li",[n("code",[e._v("FTP_PROXY")])]),e._v(" "),n("li",[n("code",[e._v("ftp_proxy")])]),e._v(" "),n("li",[n("code",[e._v("NO_PROXY")])]),e._v(" "),n("li",[n("code",[e._v("no_proxy")])])]),e._v(" "),n("p",[e._v("To use these, simply pass them on the command line using the flag:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--build-arg <varname>=<value>\n")])])]),n("p",[e._v("By default, these pre-defined variables are excluded from the output of\n"),n("code",[e._v("docker history")]),e._v(". Excluding them reduces the risk of accidentally leaking\nsensitive authentication information in an "),n("code",[e._v("HTTP_PROXY")]),e._v(" variable.")]),e._v(" "),n("p",[e._v("For example, consider building the following Dockerfile using\n"),n("code",[e._v("--build-arg HTTP_PROXY=http://user:pass@proxy.lon.example.com")])]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ubuntu\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World"')]),e._v("\n")])])]),n("p",[e._v("In this case, the value of the "),n("code",[e._v("HTTP_PROXY")]),e._v(" variable is not available in the\n"),n("code",[e._v("docker history")]),e._v(" and is not cached. If you were to change location, and your\nproxy server changed to "),n("code",[e._v("http://user:pass@proxy.sfo.example.com")]),e._v(", a subsequent\nbuild does not result in a cache miss.")]),e._v(" "),n("p",[e._v("If you need to override this behaviour then you may do so by adding an "),n("code",[e._v("ARG")]),e._v("\nstatement in the Dockerfile as follows:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" ubuntu\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ARG")]),e._v(" HTTP_PROXY\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World"')]),e._v("\n")])])]),n("p",[e._v("When building this Dockerfile, the "),n("code",[e._v("HTTP_PROXY")]),e._v(" is preserved in the\n"),n("code",[e._v("docker history")]),e._v(", and changing its value invalidates the build cache.")]),e._v(" "),n("h3",{attrs:{id:"automatic-platform-args-in-the-global-scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automatic-platform-args-in-the-global-scope"}},[e._v("#")]),e._v(" Automatic platform ARGs in the global scope")]),e._v(" "),n("p",[e._v("This feature is only available when using the "),n("a",{attrs:{href:"#buildkit"}},[e._v("BuildKit")]),e._v(" backend.")]),e._v(" "),n("p",[e._v("Docker predefines a set of "),n("code",[e._v("ARG")]),e._v(" variables with information on the platform of\nthe node performing the build (build platform) and on the platform of the\nresulting image (target platform). The target platform can be specified with\nthe "),n("code",[e._v("--platform")]),e._v(" flag on "),n("code",[e._v("docker build")]),e._v(".")]),e._v(" "),n("p",[e._v("The following "),n("code",[e._v("ARG")]),e._v(" variables are set automatically:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("TARGETPLATFORM")]),e._v(" - platform of the build result. Eg "),n("code",[e._v("linux/amd64")]),e._v(", "),n("code",[e._v("linux/arm/v7")]),e._v(", "),n("code",[e._v("windows/amd64")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("TARGETOS")]),e._v(" - OS component of TARGETPLATFORM")]),e._v(" "),n("li",[n("code",[e._v("TARGETARCH")]),e._v(" - architecture component of TARGETPLATFORM")]),e._v(" "),n("li",[n("code",[e._v("TARGETVARIANT")]),e._v(" - variant component of TARGETPLATFORM")]),e._v(" "),n("li",[n("code",[e._v("BUILDPLATFORM")]),e._v(" - platform of the node performing the build.")]),e._v(" "),n("li",[n("code",[e._v("BUILDOS")]),e._v(" - OS component of BUILDPLATFORM")]),e._v(" "),n("li",[n("code",[e._v("BUILDARCH")]),e._v(" - architecture component of BUILDPLATFORM")]),e._v(" "),n("li",[n("code",[e._v("BUILDVARIANT")]),e._v(" - variant component of BUILDPLATFORM")])]),e._v(" "),n("p",[e._v("These arguments are defined in the global scope so are not automatically\navailable inside build stages or for your "),n("code",[e._v("RUN")]),e._v(" commands. To expose one of\nthese arguments inside the build stage redefine it without value.")]),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),n("div",{staticClass:"language-Dockerfile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" alpine\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ARG")]),e._v(" TARGETPLATFORM\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"I\'m building for $TARGETPLATFORM"')]),e._v("\n")])])]),n("h3",{attrs:{id:"impact-on-build-caching"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#impact-on-build-caching"}},[e._v("#")]),e._v(" Impact on build caching")]),e._v(" "),n("p",[n("code",[e._v("ARG")]),e._v(" variables are not persisted into the built image as "),n("code",[e._v("ENV")]),e._v(" variables are.\nHowever, "),n("code",[e._v("ARG")]),e._v(" variables do impact the build cache in similar ways. If a\nDockerfile defines an "),n("code",[e._v("ARG")]),e._v(' variable whose value is different from a previous\nbuild, then a "cache miss" occurs upon its first usage, not its definition. In\nparticular, all '),n("code",[e._v("RUN")]),e._v(" instructions following an "),n("code",[e._v("ARG")]),e._v(" instruction use the "),n("code",[e._v("ARG")]),e._v("\nvariable implicitly (as an environment variable), thus can cause a cache miss.\nAll predefined "),n("code",[e._v("ARG")]),e._v(" variables are exempt from caching unless there is a\nmatching "),n("code",[e._v("ARG")]),e._v(" statement in the "),n("code",[e._v("Dockerfile")]),e._v(".")]),e._v(" "),n("p",[e._v("For example, consider these two Dockerfile:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM ubuntu\n2 ARG CONT_IMG_VER\n3 RUN echo $CONT_IMG_VER\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM ubuntu\n2 ARG CONT_IMG_VER\n3 RUN echo hello\n")])])]),n("p",[e._v("If you specify "),n("code",[e._v("--build-arg CONT_IMG_VER=<value>")]),e._v(" on the command line, in both\ncases, the specification on line 2 does not cause a cache miss; line 3 does\ncause a cache miss."),n("code",[e._v("ARG CONT_IMG_VER")]),e._v(" causes the RUN line to be identified\nas the same as running "),n("code",[e._v("CONT_IMG_VER=<value>")]),e._v(" echo hello, so if the "),n("code",[e._v("<value>")]),e._v("\nchanges, we get a cache miss.")]),e._v(" "),n("p",[e._v("Consider another example under the same command line:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM ubuntu\n2 ARG CONT_IMG_VER\n3 ENV CONT_IMG_VER $CONT_IMG_VER\n4 RUN echo $CONT_IMG_VER\n")])])]),n("p",[e._v("In this example, the cache miss occurs on line 3. The miss happens because\nthe variable's value in the "),n("code",[e._v("ENV")]),e._v(" references the "),n("code",[e._v("ARG")]),e._v(" variable and that\nvariable is changed through the command line. In this example, the "),n("code",[e._v("ENV")]),e._v("\ncommand causes the image to include the value.")]),e._v(" "),n("p",[e._v("If an "),n("code",[e._v("ENV")]),e._v(" instruction overrides an "),n("code",[e._v("ARG")]),e._v(" instruction of the same name, like\nthis Dockerfile:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1 FROM ubuntu\n2 ARG CONT_IMG_VER\n3 ENV CONT_IMG_VER hello\n4 RUN echo $CONT_IMG_VER\n")])])]),n("p",[e._v("Line 3 does not cause a cache miss because the value of "),n("code",[e._v("CONT_IMG_VER")]),e._v(" is a\nconstant ("),n("code",[e._v("hello")]),e._v("). As a result, the environment variables and values used on\nthe "),n("code",[e._v("RUN")]),e._v(" (line 4) doesn't change between builds.")]),e._v(" "),n("h2",{attrs:{id:"onbuild"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#onbuild"}},[e._v("#")]),e._v(" ONBUILD")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("ONBUILD [INSTRUCTION]\n")])])]),n("p",[e._v("The "),n("code",[e._v("ONBUILD")]),e._v(" instruction adds to the image a "),n("em",[e._v("trigger")]),e._v(" instruction to\nbe executed at a later time, when the image is used as the base for\nanother build. The trigger will be executed in the context of the\ndownstream build, as if it had been inserted immediately after the\n"),n("code",[e._v("FROM")]),e._v(" instruction in the downstream "),n("code",[e._v("Dockerfile")]),e._v(".")]),e._v(" "),n("p",[e._v("Any build instruction can be registered as a trigger.")]),e._v(" "),n("p",[e._v("This is useful if you are building an image which will be used as a base\nto build other images, for example an application build environment or a\ndaemon which may be customized with user-specific configuration.")]),e._v(" "),n("p",[e._v("For example, if your image is a reusable Python application builder, it\nwill require application source code to be added in a particular\ndirectory, and it might require a build script to be called "),n("em",[e._v("after")]),e._v("\nthat. You can't just call "),n("code",[e._v("ADD")]),e._v(" and "),n("code",[e._v("RUN")]),e._v(" now, because you don't yet\nhave access to the application source code, and it will be different for\neach application build. You could simply provide application developers\nwith a boilerplate "),n("code",[e._v("Dockerfile")]),e._v(" to copy-paste into their application, but\nthat is inefficient, error-prone and difficult to update because it\nmixes with application-specific code.")]),e._v(" "),n("p",[e._v("The solution is to use "),n("code",[e._v("ONBUILD")]),e._v(" to register advance instructions to\nrun later, during the next build stage.")]),e._v(" "),n("p",[e._v("Here's how it works:")]),e._v(" "),n("ol",[n("li",[e._v("When it encounters an "),n("code",[e._v("ONBUILD")]),e._v(" instruction, the builder adds a\ntrigger to the metadata of the image being built. The instruction\ndoes not otherwise affect the current build.")]),e._v(" "),n("li",[e._v("At the end of the build, a list of all triggers is stored in the\nimage manifest, under the key "),n("code",[e._v("OnBuild")]),e._v(". They can be inspected with\nthe "),n("code",[e._v("docker inspect")]),e._v(" command.")]),e._v(" "),n("li",[e._v("Later the image may be used as a base for a new build, using the\n"),n("code",[e._v("FROM")]),e._v(" instruction. As part of processing the "),n("code",[e._v("FROM")]),e._v(" instruction,\nthe downstream builder looks for "),n("code",[e._v("ONBUILD")]),e._v(" triggers, and executes\nthem in the same order they were registered. If any of the triggers\nfail, the "),n("code",[e._v("FROM")]),e._v(" instruction is aborted which in turn causes the\nbuild to fail. If all triggers succeed, the "),n("code",[e._v("FROM")]),e._v(" instruction\ncompletes and the build continues as usual.")]),e._v(" "),n("li",[e._v('Triggers are cleared from the final image after being executed. In\nother words they are not inherited by "grand-children" builds.')])]),e._v(" "),n("p",[e._v("For example you might add something like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("[...]\nONBUILD ADD . /app/src\nONBUILD RUN /usr/local/bin/python-build --dir /app/src\n[...]\n")])])]),n("blockquote",[n("p",[n("strong",[e._v("Warning")]),e._v(": Chaining "),n("code",[e._v("ONBUILD")]),e._v(" instructions using "),n("code",[e._v("ONBUILD ONBUILD")]),e._v(" isn't allowed.")])]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("Warning")]),e._v(": The "),n("code",[e._v("ONBUILD")]),e._v(" instruction may not trigger "),n("code",[e._v("FROM")]),e._v(" or "),n("code",[e._v("MAINTAINER")]),e._v(" instructions.")])]),e._v(" "),n("h2",{attrs:{id:"stopsignal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stopsignal"}},[e._v("#")]),e._v(" STOPSIGNAL")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("STOPSIGNAL signal\n")])])]),n("p",[e._v("The "),n("code",[e._v("STOPSIGNAL")]),e._v(" instruction sets the system call signal that will be sent to the container to exit.\nThis signal can be a valid unsigned number that matches a position in the kernel's syscall table, for instance 9,\nor a signal name in the format SIGNAME, for instance SIGKILL.")]),e._v(" "),n("h2",{attrs:{id:"healthcheck"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck"}},[e._v("#")]),e._v(" HEALTHCHECK")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("HEALTHCHECK")]),e._v(" instruction has two forms:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("HEALTHCHECK [OPTIONS] CMD command")]),e._v(" (check container health by running a command inside the container)")]),e._v(" "),n("li",[n("code",[e._v("HEALTHCHECK NONE")]),e._v(" (disable any healthcheck inherited from the base image)")])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("HEALTHCHECK")]),e._v(" instruction tells Docker how to test a container to check that\nit is still working. This can detect cases such as a web server that is stuck in\nan infinite loop and unable to handle new connections, even though the server\nprocess is still running.")]),e._v(" "),n("p",[e._v("When a container has a healthcheck specified, it has a "),n("em",[e._v("health status")]),e._v(" in\naddition to its normal status. This status is initially "),n("code",[e._v("starting")]),e._v(". Whenever a\nhealth check passes, it becomes "),n("code",[e._v("healthy")]),e._v(" (whatever state it was previously in).\nAfter a certain number of consecutive failures, it becomes "),n("code",[e._v("unhealthy")]),e._v(".")]),e._v(" "),n("p",[e._v("The options that can appear before "),n("code",[e._v("CMD")]),e._v(" are:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("--interval=DURATION")]),e._v(" (default: "),n("code",[e._v("30s")]),e._v(")")]),e._v(" "),n("li",[n("code",[e._v("--timeout=DURATION")]),e._v(" (default: "),n("code",[e._v("30s")]),e._v(")")]),e._v(" "),n("li",[n("code",[e._v("--start-period=DURATION")]),e._v(" (default: "),n("code",[e._v("0s")]),e._v(")")]),e._v(" "),n("li",[n("code",[e._v("--retries=N")]),e._v(" (default: "),n("code",[e._v("3")]),e._v(")")])]),e._v(" "),n("p",[e._v("The health check will first run "),n("strong",[e._v("interval")]),e._v(" seconds after the container is\nstarted, and then again "),n("strong",[e._v("interval")]),e._v(" seconds after each previous check completes.")]),e._v(" "),n("p",[e._v("If a single run of the check takes longer than "),n("strong",[e._v("timeout")]),e._v(" seconds then the check\nis considered to have failed.")]),e._v(" "),n("p",[e._v("It takes "),n("strong",[e._v("retries")]),e._v(" consecutive failures of the health check for the container\nto be considered "),n("code",[e._v("unhealthy")]),e._v(".")]),e._v(" "),n("p",[n("strong",[e._v("start period")]),e._v(" provides initialization time for containers that need time to bootstrap.\nProbe failure during that period will not be counted towards the maximum number of retries.\nHowever, if a health check succeeds during the start period, the container is considered\nstarted and all consecutive failures will be counted towards the maximum number of retries.")]),e._v(" "),n("p",[e._v("There can only be one "),n("code",[e._v("HEALTHCHECK")]),e._v(" instruction in a Dockerfile. If you list\nmore than one then only the last "),n("code",[e._v("HEALTHCHECK")]),e._v(" will take effect.")]),e._v(" "),n("p",[e._v("The command after the "),n("code",[e._v("CMD")]),e._v(" keyword can be either a shell command (e.g. "),n("code",[e._v("HEALTHCHECK CMD /bin/check-running")]),e._v(") or an "),n("em",[e._v("exec")]),e._v(" array (as with other Dockerfile commands;\nsee e.g. "),n("code",[e._v("ENTRYPOINT")]),e._v(" for details).")]),e._v(" "),n("p",[e._v("The command's exit status indicates the health status of the container.\nThe possible values are:")]),e._v(" "),n("ul",[n("li",[e._v("0: success - the container is healthy and ready for use")]),e._v(" "),n("li",[e._v("1: unhealthy - the container is not working correctly")]),e._v(" "),n("li",[e._v("2: reserved - do not use this exit code")])]),e._v(" "),n("p",[e._v("For example, to check every five minutes or so that a web-server is able to\nserve the site's main page within three seconds:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("HEALTHCHECK --interval=5m --timeout=3s \\\n  CMD curl -f http://localhost/ || exit 1\n")])])]),n("p",[e._v("To help debug failing probes, any output text (UTF-8 encoded) that the command writes\non stdout or stderr will be stored in the health status and can be queried with\n"),n("code",[e._v("docker inspect")]),e._v(". Such output should be kept short (only the first 4096 bytes\nare stored currently).")]),e._v(" "),n("p",[e._v("When the health status of a container changes, a "),n("code",[e._v("health_status")]),e._v(" event is\ngenerated with the new status.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("HEALTHCHECK")]),e._v(" feature was added in Docker 1.12.")]),e._v(" "),n("h2",{attrs:{id:"shell"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[e._v("#")]),e._v(" SHELL")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('SHELL ["executable", "parameters"]\n')])])]),n("p",[e._v("The "),n("code",[e._v("SHELL")]),e._v(" instruction allows the default shell used for the "),n("em",[e._v("shell")]),e._v(" form of\ncommands to be overridden. The default shell on Linux is "),n("code",[e._v('["/bin/sh", "-c"]')]),e._v(", and on\nWindows is "),n("code",[e._v('["cmd", "/S", "/C"]')]),e._v(". The "),n("code",[e._v("SHELL")]),e._v(" instruction "),n("em",[e._v("must")]),e._v(" be written in JSON\nform in a Dockerfile.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("SHELL")]),e._v(" instruction is particularly useful on Windows where there are\ntwo commonly used and quite different native shells: "),n("code",[e._v("cmd")]),e._v(" and "),n("code",[e._v("powershell")]),e._v(", as\nwell as alternate shells available including "),n("code",[e._v("sh")]),e._v(".")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("SHELL")]),e._v(" instruction can appear multiple times. Each "),n("code",[e._v("SHELL")]),e._v(" instruction overrides\nall previous "),n("code",[e._v("SHELL")]),e._v(" instructions, and affects all subsequent instructions. For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('FROM microsoft/windowsservercore\n\n# Executed as cmd /S /C echo default\nRUN echo default\n\n# Executed as cmd /S /C powershell -command Write-Host default\nRUN powershell -command Write-Host default\n\n# Executed as powershell -command Write-Host hello\nSHELL ["powershell", "-command"]\nRUN Write-Host hello\n\n# Executed as cmd /S /C echo hello\nSHELL ["cmd", "/S", "/C"]\nRUN echo hello\n')])])]),n("p",[e._v("The following instructions can be affected by the "),n("code",[e._v("SHELL")]),e._v(" instruction when the\n"),n("em",[e._v("shell")]),e._v(" form of them is used in a Dockerfile: "),n("code",[e._v("RUN")]),e._v(", "),n("code",[e._v("CMD")]),e._v(" and "),n("code",[e._v("ENTRYPOINT")]),e._v(".")]),e._v(" "),n("p",[e._v("The following example is a common pattern found on Windows which can be\nstreamlined by using the "),n("code",[e._v("SHELL")]),e._v(" instruction:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('...\nRUN powershell -command Execute-MyCmdlet -param1 "c:\\foo.txt"\n...\n')])])]),n("p",[e._v("The command invoked by docker will be:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('cmd /S /C powershell -command Execute-MyCmdlet -param1 "c:\\foo.txt"\n')])])]),n("p",[e._v("This is inefficient for two reasons. First, there is an un-necessary cmd.exe command\nprocessor (aka shell) being invoked. Second, each "),n("code",[e._v("RUN")]),e._v(" instruction in the "),n("em",[e._v("shell")]),e._v("\nform requires an extra "),n("code",[e._v("powershell -command")]),e._v(" prefixing the command.")]),e._v(" "),n("p",[e._v("To make this more efficient, one of two mechanisms can be employed. One is to\nuse the JSON form of the RUN command such as:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('...\nRUN ["powershell", "-command", "Execute-MyCmdlet", "-param1 \\"c:\\\\foo.txt\\""]\n...\n')])])]),n("p",[e._v("While the JSON form is unambiguous and does not use the un-necessary cmd.exe,\nit does require more verbosity through double-quoting and escaping. The alternate\nmechanism is to use the "),n("code",[e._v("SHELL")]),e._v(" instruction and the "),n("em",[e._v("shell")]),e._v(" form,\nmaking a more natural syntax for Windows users, especially when combined with\nthe "),n("code",[e._v("escape")]),e._v(" parser directive:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('# escape=`\n\nFROM microsoft/nanoserver\nSHELL ["powershell","-command"]\nRUN New-Item -ItemType Directory C:\\Example\nADD Execute-MyCmdlet.ps1 c:\\example\\\nRUN c:\\example\\Execute-MyCmdlet -sample \'hello world\'\n')])])]),n("p",[e._v("Resulting in:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("PS E:\\docker\\build\\shell> docker build -t shell .\nSending build context to Docker daemon 4.096 kB\nStep 1/5 : FROM microsoft/nanoserver\n ---\x3e 22738ff49c6d\nStep 2/5 : SHELL powershell -command\n ---\x3e Running in 6fcdb6855ae2\n ---\x3e 6331462d4300\nRemoving intermediate container 6fcdb6855ae2\nStep 3/5 : RUN New-Item -ItemType Directory C:\\Example\n ---\x3e Running in d0eef8386e97\n\n\n    Directory: C:\\\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----       10/28/2016  11:26 AM                Example\n\n\n ---\x3e 3f2fbf1395d9\nRemoving intermediate container d0eef8386e97\nStep 4/5 : ADD Execute-MyCmdlet.ps1 c:\\example\\\n ---\x3e a955b2621c31\nRemoving intermediate container b825593d39fc\nStep 5/5 : RUN c:\\example\\Execute-MyCmdlet 'hello world'\n ---\x3e Running in be6d8e63fe75\nhello world\n ---\x3e 8e559e9bf424\nRemoving intermediate container be6d8e63fe75\nSuccessfully built 8e559e9bf424\nPS E:\\docker\\build\\shell>\n")])])]),n("p",[e._v("The "),n("code",[e._v("SHELL")]),e._v(" instruction could also be used to modify the way in which\na shell operates. For example, using "),n("code",[e._v("SHELL cmd /S /C /V:ON|OFF")]),e._v(" on Windows, delayed\nenvironment variable expansion semantics could be modified.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("SHELL")]),e._v(" instruction can also be used on Linux should an alternate shell be\nrequired such as "),n("code",[e._v("zsh")]),e._v(", "),n("code",[e._v("csh")]),e._v(", "),n("code",[e._v("tcsh")]),e._v(" and others.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("SHELL")]),e._v(" feature was added in Docker 1.12.")]),e._v(" "),n("h2",{attrs:{id:"external-implementation-features"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#external-implementation-features"}},[e._v("#")]),e._v(" External implementation features")]),e._v(" "),n("p",[e._v("This feature is only available when using the  "),n("a",{attrs:{href:"#buildkit"}},[e._v("BuildKit")]),e._v(" backend.")]),e._v(" "),n("p",[e._v("Docker build supports experimental features like cache mounts, build secrets and\nssh forwarding that are enabled by using an external implementation of the\nbuilder with a syntax directive. To learn about these features, "),n("a",{attrs:{href:"https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("refer to the documentation in BuildKit repository"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"dockerfile-examples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-examples"}},[e._v("#")]),e._v(" Dockerfile examples")]),e._v(" "),n("p",[e._v("Below you can see some examples of Dockerfile syntax. If you're interested in\nsomething more realistic, take a look at the list of "),n("a",{attrs:{href:"https://docs.docker.com/engine/examples/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerization examples"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('# Nginx\n#\n# VERSION               0.0.1\n\nFROM      ubuntu\nLABEL Description="This image is used to start the foobar executable" Vendor="ACME Products" Version="1.0"\nRUN apt-get update && apt-get install -y inotify-tools nginx apache2 openssh-server\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('# Firefox over VNC\n#\n# VERSION               0.3\n\nFROM ubuntu\n\n# Install vnc, xvfb in order to create a \'fake\' display and firefox\nRUN apt-get update && apt-get install -y x11vnc xvfb firefox\nRUN mkdir ~/.vnc\n# Setup a password\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n# Autostart firefox (might not be the best way, but it does the trick)\nRUN bash -c \'echo "firefox" >> /.bashrc\'\n\nEXPOSE 5900\nCMD    ["x11vnc", "-forever", "-usepw", "-create"]\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# Multiple images example\n#\n# VERSION               0.1\n\nFROM ubuntu\nRUN echo foo > bar\n# Will output something like ===> 907ad6c2736f\n\nFROM ubuntu\nRUN echo moo > oink\n# Will output something like ===> 695d7793cbe4\n\n# You'll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with\n# /oink.\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);
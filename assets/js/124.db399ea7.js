(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{523:function(e,t,n){"use strict";n.r(t);var s=n(48),a=Object(s.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("blockquote",[t("p",[this._v("检测类型")])]),this._v(" "),t("h4",{attrs:{id:"isobject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isobject"}},[this._v("#")]),this._v(" isObject")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * isObject({})\n * // => true\n *\n * isObject([1, 2, 3])\n * // => true\n *\n * isObject(Function)\n * // => true\n *\n * isObject(null)\n * // => false\n */\nfunction isObject(value) {\n  const type = typeof value\n  return value != null && (type == 'object' || type == 'function')\n}\n\nexport default isObject\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{455:function(t,n,e){"use strict";e.r(n);var o=e(48),a=Object(o.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react-hooks-入门-usestate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-hooks-入门-usestate"}},[t._v("#")]),t._v(" React Hooks 入门-useState")]),t._v(" "),e("h2",{attrs:{id:"usestate介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate介绍"}},[t._v("#")]),t._v(" useState介绍")]),t._v(" "),e("p",[t._v("useState()用于为函数组件引入状态（state）")]),t._v(" "),e("p",[t._v("useState用法比较简单，useState 接收一个参数，作为state的初始值，返回一个数组，数组第一个值是当前state，第二个值是更新state的方法。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 “count” 的 state 变量和改变 count 的函数 setCount\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <p>{count}</p>\n      {/* 更新状态count时，直接调用setCount */}\n      <button onClick={() => setCount(count + 1)}>加1</button>\n    </>\n  )\n}\n")])])]),e("ul",[e("li",[t._v("state 只在组件首次渲染的时候被创建。在下一次重新渲染时，useState 返回给我们当前的 state。")]),t._v(" "),e("li",[t._v("与 class 组件中的 setState 方法不同，如果你修改状态的时候，传的状态值没有变化，则不重新渲染")]),t._v(" "),e("li",[t._v("与 class 组件中的 setState 方法不同，useState 不会自动合并更新对象。你可以用函数式的 setState 结合展开运算符来达到合并更新对象的效果")])]),t._v(" "),e("h2",{attrs:{id:"usestate-实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate-实践"}},[t._v("#")]),t._v(" useState 实践")]),t._v(" "),e("p",[t._v("效果图：\n"),e("img",{attrs:{src:"http://i.simbel.cn/note/20200213155807.png",alt:"20200213155807"}})]),t._v(" "),e("p",[t._v("示例代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { useState } from \"react\";\nimport { Slider, Row, Col } from \"antd\";\n\nconst BoxGenerator = () => {\n  const [height, setHeight] = useState(100);\n  const [width, setWidth] = useState(100);\n  const [color, setColor] = useState({ r: 0, g: 0, b: 0 });\n  const [borderRadius, setBorderRadius] = useState(100);\n\n  const style = {\n    height,\n    width,\n    backgroundColor: `rgb(${color.r}, ${color.g}, ${color.b})`,\n    borderRadius\n  };\n\n  return (\n    <div style={{ border: '1px #ccc solid', padding: 10, width: 600, margin: '10px auto' }}>\n      <Row>\n        <Col span={4}>Width：</Col>\n        <Col span={20}>\n          <Slider min={10} max={300} value={width} onChange={width => setWidth(width)} />\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>Height:</Col>\n        <Col span={20}>\n          <Slider min={10} max={300} value={height} onChange={height => setHeight(height)} />\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>Color:</Col>\n        <Col span={20}>\n          <h3>R:</h3>\n          <Slider\n            min={0}\n            max={255}\n            value={color.r}\n            onChange={r => setColor({ ...color, r })}\n          />\n          <h3>G:</h3>\n          <Slider\n            min={0}\n            max={255}\n            value={color.g}\n            onChange={g => setColor({ ...color, g })}\n          />\n          <h3>B:</h3>\n          <Slider\n            min={0}\n            max={255}\n            value={color.b}\n            onChange={b => setColor({ ...color, b })}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col span={4}>Border Radius:</Col>\n        <Col span={20}>\n          <Slider min={10} max={300} value={borderRadius} onChange={borderRadius => setBorderRadius(borderRadius)} />\n        </Col>\n      </Row>\n      <Row>\n        <Col span={20} offset={4}>\n          <div style={style}></div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default BoxGenerator;\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);
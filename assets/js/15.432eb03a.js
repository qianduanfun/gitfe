(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{415:function(a,t,s){"use strict";s.r(t);var e=s(48),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"开发必读-mac开发终端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发必读-mac开发终端"}},[a._v("#")]),a._v(" [开发必读] mac开发终端")]),a._v(" "),s("p",[a._v("本篇将会介绍zsh这个shell的强大之处以及iterm2这个强大的现代化终端，将两个工具结合使用即酷炫又实用。"),s("br"),a._v("\n注：本文只会介绍实际开发中使用频率比较高的用法，该工具的强大功能并未全部介绍完。如有兴趣可查阅官方文档继续学习。")]),a._v(" "),s("h2",{attrs:{id:"iterm2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterm2"}},[a._v("#")]),a._v(" iterm2")]),a._v(" "),s("blockquote",[s("p",[a._v("iterm2取代了默认的Terminal，它将带给你现代化的体验以及任何你想要的功能")])]),a._v(" "),s("h3",{attrs:{id:"安装iterm2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装iterm2"}},[a._v("#")]),a._v(" 安装iterm2")]),a._v(" "),s("p",[a._v("这里我们直接去"),s("a",{attrs:{href:"https://www.iterm2.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网"),s("OutboundLink")],1),a._v("进行download")]),a._v(" "),s("h3",{attrs:{id:"快捷键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快捷键"}},[a._v("#")]),a._v(" 快捷键")]),a._v(" "),s("p",[a._v("熟练使用快捷键是程序员的基本操守")]),a._v(" "),s("h4",{attrs:{id:"唤醒热键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#唤醒热键"}},[a._v("#")]),a._v(" 唤醒热键")]),a._v(" "),s("p",[a._v("给终端加一个快速唤醒/隐藏的快捷键是必须要做的，否则用鼠标找到终端的快捷方式再打开这种做法不仅慢而且逼格低，设置方式\n"),s("code",[a._v("iterm2")]),a._v(" -> "),s("code",[a._v("Preferences")]),a._v(" -> "),s("code",[a._v("Keys")]),a._v(" -> "),s("code",[a._v("Hotkey")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gw.alicdn.com/tfs/TB1AHfOXvb2gK0jSZK9XXaEgFXa-1920-1048.jpg",alt:""}})]),a._v(" "),s("p",[a._v("这里我们建议使用"),s("code",[a._v("option")]),a._v(" + "),s("code",[a._v("space")]),a._v(" 组合键来唤醒/隐藏终端")]),a._v(" "),s("h4",{attrs:{id:"其他快捷键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他快捷键"}},[a._v("#")]),a._v(" 其他快捷键")]),a._v(" "),s("p",[a._v("以下快捷键与chrome快捷键类似，必须熟练使用")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("ctrl")]),a._v(" + "),s("code",[a._v("a/e")]),a._v(" 快速切换到当前正在输入的文本的头部／尾部")]),a._v(" "),s("li",[s("code",[a._v("ctrl")]),a._v(" + "),s("code",[a._v("u")]),a._v(" 清空当前输入")]),a._v(" "),s("li",[s("code",[a._v("cmd")]),a._v(" + "),s("code",[a._v("T")]),a._v(" 打开一个新的iterm2 Tab")]),a._v(" "),s("li",[s("code",[a._v("cmd")]),a._v(" + "),s("code",[a._v("方向键")]),a._v(" 左右切换Tab")]),a._v(" "),s("li",[s("code",[a._v("cmd")]),a._v(" + "),s("code",[a._v("D")]),a._v(" 分屏")]),a._v(" "),s("li",[s("code",[a._v("cmd")]),a._v(" + "),s("code",[a._v("K")]),a._v(" 清屏")]),a._v(" "),s("li",[s("code",[a._v("cmd")]),a._v(" + "),s("code",[a._v("N")]),a._v(" 打开一个新的iterm2 窗口")])]),a._v(" "),s("h4",{attrs:{id:"透明度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#透明度"}},[a._v("#")]),a._v(" 透明度")]),a._v(" "),s("p",[a._v("个人喜好这里建议给iterm2配置一个透明度，看起来体验感舒适很多\n"),s("code",[a._v("iterm2")]),a._v(" -> "),s("code",[a._v("Preferences")]),a._v(" -> "),s("code",[a._v("Profiles")]),a._v(" -> "),s("code",[a._v("Window")]),a._v(" -> "),s("code",[a._v("Transparency")])]),a._v(" "),s("p",[a._v("效果如下")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gw.alicdn.com/tfs/TB1Fm_RXuH2gK0jSZJnXXaT1FXa-1452-986.jpg",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"zsh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zsh"}},[a._v("#")]),a._v(" zsh")]),a._v(" "),s("blockquote",[s("p",[a._v("Unix shell，一种壳层与命令行界面，是UNIX操作系统下传统的用户和计算机的交互界面。第一个用户直接输入命令来执行各种各样的任务。\n普通意义上的shell就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。同样的Unix下的图形用户界面GNOME和KDE，有时也被叫做“虚拟shell”或“图形shell”。")])]),a._v(" "),s("p",[a._v("目前常见的shell有bash、sh、csh，ksh等, 这里我们介绍shell中的极品zsh。\nzsh的强大之处随便列举就有以下几点，色彩高亮，命令提示，智能补全等等，下面我们会详细介绍\n这么牛逼的东西安装起来自然是及其麻烦的，好在已经有大神帮我们做了一个一键安装zsh的脚本"),s("a",{attrs:{href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"}},[a._v("oh-my-zsh"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"安装zsh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装zsh"}},[a._v("#")]),a._v(" 安装zsh")]),a._v(" "),s("p",[a._v("使用curl来安装")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('# sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"\n')])])]),s("h3",{attrs:{id:"配置主题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置主题"}},[a._v("#")]),a._v(" 配置主题")]),a._v(" "),s("p",[a._v("默认的zsh主题是非常丑并且展示的信息也很少的，这里zsh提供了多种主题供我们直接使用，当然你可以根据自己的喜欢来编写一个主题，这里我们使用ys这个主题。设置方式")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ vim ~/.zshrc // 打开zsh配置文件\n10 ZSH_THEME="ys" // 在第10行设置当前主题为ys\n$ source ~/.zshrc // 重新执行一遍zsh配置文件\n')])])]),s("p",[s("img",{attrs:{src:"https://gw.alicdn.com/tfs/TB1OxHTXAH0gK0jSZPiXXavapXa-1442-870.jpg",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"保留环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留环境变量"}},[a._v("#")]),a._v(" 保留环境变量")]),a._v(" "),s("p",[a._v("zsh安装好后执行node npm 等命令会失效，需要我们自己手动把bash的环境变量配置到zsh里")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("vim ~/.zshrc\n")])])]),s("p",[a._v("在最后加入指令 引入bash里配置好的环境变量,重启终端")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("source ~/.bash_profile\n")])])]),s("h3",{attrs:{id:"插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件"}},[a._v("#")]),a._v(" 插件")]),a._v(" "),s("p",[a._v("zsh提供了插件功能，我们可以通过插件来实现更加强大的功能")]),a._v(" "),s("h4",{attrs:{id:"autojump插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autojump插件"}},[a._v("#")]),a._v(" autojump插件")]),a._v(" "),s("p",[a._v("必装插件没有之一，可以让你在任意目录之间进行跳转")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ brew install autojump\n$ vim ~/.zshrc\n\n61 plugins=(\n62   git\n63   autojump\n64 )\n\n$ source ~/.zshrc\n")])])]),s("h5",{attrs:{id:"使用autojump"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用autojump"}},[a._v("#")]),a._v(" 使用autojump")]),a._v(" "),s("p",[s("code",[a._v("j")]),a._v(" + "),s("code",[a._v("目录缩写")]),a._v(" 快速去到你曾经进入过的目录")]),a._v(" "),s("p",[a._v("autojump会自动对你进入过的目录进行记录并且定义权重，使用j命令可以迅速进入目录")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ j hub // 等价于 cd ~/workspace/github\n$ j hub // 如果当前目录不对，可以重复执行该命令，会自动根据权重依次匹配\n$ d // 会列出你曾经进入过的目录，输入前面的序号可以直接进入该目录\n")])])]),s("h4",{attrs:{id:"git插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git插件"}},[a._v("#")]),a._v(" git插件")]),a._v(" "),s("p",[a._v("git插件也是必装的插件，它提供了多种alias来简化你的git命令，以下几种是会被经常使用的命令，你也可以在.zshrc中额外添加喜好的alias")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$ g // 等价于git\n$ ga // 等价于git add\n$ gcmsg "" // 等价于git commit -m ""\n$ gco // 等价与git check out\n$ gb // 等价于git branch\n')])])]),s("h3",{attrs:{id:"进入目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进入目录"}},[a._v("#")]),a._v(" 进入目录")]),a._v(" "),s("p",[a._v("无需输入"),s("code",[a._v("cd")]),a._v("命令"),s("br"),a._v("\n输入"),s("code",[a._v("~")]),a._v("等价于"),s("code",[a._v("cd ～")])]),a._v(" "),s("h3",{attrs:{id:"路径补全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径补全"}},[a._v("#")]),a._v(" 路径补全")]),a._v(" "),s("p",[a._v("*nix 下的其他shell默认可以通过tab来实现路径补全，但是功能比起zsh的路径补全简直是太简单了。这里我们举一个例子\n"),s("code",[a._v("cd /u/l/b")]),a._v(" 按下tab键自动帮你补全为"),s("code",[a._v("cd /usr/local/bin/")])])])}),[],!1,null,null,null);t.default=r.exports}}]);
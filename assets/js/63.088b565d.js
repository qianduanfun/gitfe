(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{462:function(e,t,a){"use strict";a.r(t);var n=a(48),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),a("blockquote",[a("p",[e._v("Koa是基于 Node.js 平台的web开发框架，体积小，但扩展性强。通过利用async函数，帮你丢弃回调函数，增强错误处理。")])]),e._v(" "),a("h3",{attrs:{id:"开发环境搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发环境搭建"}},[e._v("#")]),e._v(" 开发环境搭建")]),e._v(" "),a("h4",{attrs:{id:"安装node-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装node-js"}},[e._v("#")]),e._v(" 安装node.js")]),e._v(" "),a("p",[e._v("koa2开发要求Node.js版本高于v7.6\n查看Node版本方法（windows版本）：\n"),a("code",[e._v("node -v")])]),e._v(" "),a("h4",{attrs:{id:"搭建环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建环境"}},[e._v("#")]),e._v(" 搭建环境")]),e._v(" "),a("p",[e._v("建立项目文件夹")]),e._v(" "),a("p",[a("code",[e._v("cd code //进入code文件夹")]),e._v(" "),a("code",[e._v("mkdir koa //创建koa文件夹")]),e._v(" "),a("code",[e._v("cd koa //进入koa文件夹")])]),e._v(" "),a("p",[e._v("进入项目文件夹之后，我们初始化生产package.json文件")]),e._v(" "),a("p",[a("code",[e._v("npm init -y")])]),e._v(" "),a("p",[e._v("生成package.json之后，安装koa包")]),e._v(" "),a("p",[a("code",[e._v("npm install --save koa")])]),e._v(" "),a("p",[e._v("环境搭建完成之后，我们来写第一个小demo练习一下～\n在文件夹根目录下新建index.js文件：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\n\napp.use(async ( ctx )=>{\n  ctx.body = 'hello koa'\n})\n\napp.listen(3000)\n\n")])])]),a("p",[e._v("编写完成后在命令行输入：\n"),a("code",[e._v("node index.js")])]),e._v(" "),a("p",[e._v("然后在浏览器中打开 http://127.0.0.0:3000 就可以看到展示的结果了～")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://f.shudong.wang/huangxiangyang/20200213173050.png",alt:"20200213173050"}})]),e._v(" "),a("h4",{attrs:{id:"async-await的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await的使用"}},[e._v("#")]),e._v(" async/await的使用")]),e._v(" "),a("p",[e._v("由于koa2 基于node7.6版本后引入的使用async和await来实现异步，所以我们先了解以下async及await的基础概念")]),e._v(" "),a("p",[e._v("async是声明一个方法是异步的，await是等待异步方法完成。 需要注意的是await必须在async方法中才可以使用，因为await访问本身就会造成程序停止阻塞，所以必须在异步方法中才可以使用。")]),e._v(" "),a("p",[e._v("eg:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function takeLongTime(){\n  return new Promise(resolve => {\n    setTimeout(() => resolve("long_time_value", 1000))\n  })\n}\nasync function test(){\n  const v = await takeLongTime();\n  console.log(v);\n}\n\ntest();\n')])])]),a("h3",{attrs:{id:"app-listen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#app-listen"}},[e._v("#")]),e._v(" app.listen(...)")]),e._v(" "),a("p",[e._v("Koa应用程序不是HTTP服务器1对1展现，可以将一个或者多个Koa应用安装在一起形成单个HTTP服务器的更大应用程序。\n以下内容是指一个无作用的Koa应用程序绑定到3000指定端口：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  const Koa = require('koa');\n  const app = new Koa();\n  app.listen(3000);\n")])])]),a("p",[e._v("这里的app.listen()语法糖的详细方法为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  const http = require('http');\n  const Koa = require('koa');\n  const app = new Koa();\n  http.createServer(app.callback()).listen(3000);\n")])])]),a("p",[e._v("这也就意味着我们可以将同一个应用程序同时作为HTTP和HTTPS或者多个地址\neg:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  const http = require('http');\n  const https = require('https');\n  const Koa = require('koa');\n  const app = new Koa();\n  http.createServer(app.callback()).listen(3000);\n  https.createServer(app.callback()).listen(3001);\n")])])]),a("h4",{attrs:{id:"get请求的接收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get请求的接收"}},[e._v("#")]),e._v(" Get请求的接收")]),e._v(" "),a("p",[e._v("在前后端配合时，后端一般会告知我们请求时的GET/POST请求，接下来我们看一下Koa2如何接收并处理数据的：\n在Koa2中GET请求通过request接收，接收方法有两种： query和querystring。\nquery： 返回格式化好的参数对象。\nquerystring： 返回请求字符串。")]),e._v(" "),a("p",[e._v("eg:")]),e._v(" "),a("p",[e._v("demo1.js")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  const Koa = require('koa');\n  const app = new Koa();\n  app.use(async(ctx)=>{\n      let url =ctx.url;\n      let request =ctx.request;\n      let req_query = request.query;\n      let req_querystring = request.querystring;\n\n      ctx.body={\n          url,\n          req_query,\n          req_querystring\n      }\n\n  });\n\n  app.listen(3000,()=>{\n      console.log('[demo] server is starting at port 3000');\n  });\n")])])]),a("p",[e._v("编写好后，在终端中使用node demo1.js启动服务。启动一切正常可在浏览器中使用,我们可以看到获取到的数据。\n"),a("img",{attrs:{src:"http://f.shudong.wang/huangxiangyang/20200213173156.png",alt:"20200213173156"}}),e._v("\n图片中我们可以看到query是一个对象，而querystring就是一个普通的字符串")]),e._v(" "),a("h5",{attrs:{id:"直接从ctx中获取get请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接从ctx中获取get请求"}},[e._v("#")]),e._v(" 直接从ctx中获取Get请求")]),e._v(" "),a("p",[e._v("除了在ctx.request中获取Get请求外，还可以直接在ctx中得到GET请求。ctx中也分为query和querystring。接着上边的代码，我们看一下在ctx下直接获取GET请求的方式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\napp.use(async(ctx)=>{\n    let url =ctx.url;\n\n    //从request中获取GET请求\n    let request =ctx.request;\n    let req_query = request.query;\n    let req_querystring = request.querystring;\n\n    //从上下文中直接获取\n    let ctx_query = ctx.query;\n    let ctx_querystring = ctx.querystring;\n\n    ctx.body={\n        url,\n        req_query,\n        req_querystring,\n        ctx_query,\n        ctx_querystring\n    }\n\n});\n\napp.listen(3000,()=>{\n    console.log('[demo] server is starting at port 3000');\n});\n")])])]),a("p",[e._v("总结：获得GET请求的方式有两种，一种是从request中获得，一种是一直从上下文中获得。获得的格式也有两种：query和querystring。")]),e._v(" "),a("h4",{attrs:{id:"post请求的接收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post请求的接收"}},[e._v("#")]),e._v(" POST请求的接收")]),e._v(" "),a("p",[e._v("获取Post请求的步骤：")]),e._v(" "),a("blockquote",[a("p",[e._v("解析上下文ctx中的原生nodex.js对象req。\n将POST表单数据解析成query string-字符串.(eg:user=hxy&age=18)\n将字符串转换成JSON格式。")])]),e._v(" "),a("p",[e._v("ctx.request和ctx.req的区别：")]),e._v(" "),a("blockquote",[a("p",[e._v("ctx.request是Koa2中context经过封装的请求对象。\nctx.req是context提供的node.js原生HTTP请求对象。")])]),e._v(" "),a("p",[e._v("ctx.method 得到请求类型")]),e._v(" "),a("blockquote",[a("p",[e._v("Koa2中提供了ctx.method属性，可以轻松的得到请求的类型，然后根据请求类型编写不同的相应方法。\neg:\nGET请求时得到表单填写页面，POST请求时，得到POST处理页面。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\napp.use(async(ctx)=>{\n    //当请求时GET请求时，显示表单让用户填写\n    if(ctx.url==='/' && ctx.method === 'GET'){\n        let html =`\n            <h1>Koa2 request post demo</h1>\n            <form method=\"POST\"  action=\"/\">\n                <p>userName</p>\n                <input name=\"userName\" /> <br/>\n                <p>age</p>\n                <input name=\"age\" /> <br/>\n                <p>webSite</p>\n                <input name='webSite' /><br/>\n                <button type=\"submit\">submit</button>\n            </form>\n        `;\n        ctx.body =html;\n    //当请求时POST请求时\n    }else if(ctx.url==='/' && ctx.method === 'POST'){\n        ctx.body='接收到请求';\n    }else{\n        //其它请求显示404页面\n        ctx.body='<h1>404!</h1>';\n    }\n})\n\napp.listen(3000,()=>{\n    console.log('[demo] server is starting at port 3000');\n})\n")])])]),a("h4",{attrs:{id:"koa-bodyparser中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#koa-bodyparser中间件"}},[e._v("#")]),e._v(" koa-bodyparser中间件")]),e._v(" "),a("p",[e._v("对于POST请求的处理，koa-bodyparser中间件可以把koa2上下文的formData数据解析到ctx.request.body中")]),e._v(" "),a("p",[e._v("安装中间件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save koa-bodyparser@3\n")])])]),a("p",[e._v("引入使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const bodyParser = require('koa-bodyparser');\n\napp.use(bodyParser());\n")])])]),a("p",[e._v("在代码使用中，可以直接使用ctx.request.body进行获取POST请求参数，中间件自动做解析。")]),e._v(" "),a("p",[e._v("eg:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\n\nconst bodyParesr = require('koa-bodyparser');\napp.use(bodyParser());\n\napp.use(async(ctx)=>{\n    if(ctx.url==='/' && ctx.method==='GET'){\n        //显示表单页面\n        let html=`\n            <h1>JSPang Koa2 request POST</h1>\n            <form method=\"POST\" action=\"/\">\n                <p>userName</p>\n                <input name=\"userName\" /><br/>\n                <p>age</p>\n                <input name=\"age\" /><br/>\n                <p>website</p>\n                <input name=\"webSite\" /><br/>\n                <button type=\"submit\">submit</button>\n            </form>\n        `;\n        ctx.body=html;\n    }else if(ctx.url==='/' && ctx.method==='POST'){\n         let postData= ctx.request.body;\n         ctx.body=postData;\n    }else{\n        ctx.body='<h1>404!</h1>';\n    }\n\n});\n\napp.listen(3000, ()=>{\n  console.log('3000~')\n})\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{528:function(t,s,a){"use strict";a.r(s);var n=a(48),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("最初，Chunk(以及在其中导入的模块)是通过内部 webpack 图中的父子关系连接的。 使用 CommonsChunkPlugin 是为了避免它们之间的重复依赖关系，但无法进一步优化。")])]),t._v(" "),a("blockquote",[a("p",[t._v("自从 webpack v4以来，CommonsChunkPlugin 被删除，以支持 optimization.splitchunk。")])]),t._v(" "),a("h2",{attrs:{id:"默认值-defaults"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认值-defaults"}},[t._v("#")]),t._v(" 默认值 Defaults")]),t._v(" "),a("p",[t._v("开箱即用 SplitChunksPlugin 应该对大多数用户都适用。")]),t._v(" "),a("p",[t._v("默认情况下，它只影响按需块，因为更改初始块会影响 HTML 文件运行项目时应该包含的脚本标记。")]),t._v(" "),a("p",[t._v("Webpack 将根据以下条件自动分割块:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("新块可以共享，或者模块来自node_modules folder 文件夹")])]),t._v(" "),a("li",[a("p",[t._v("新块大于30kb (在 min + gz 之前)")])]),t._v(" "),a("li",[a("p",[t._v("当根据需要加载块时，并行请求的最大数量将低于或等于6")])]),t._v(" "),a("li",[a("p",[t._v("在初始页面加载时，并行请求的最大数量将小于或等于4")])])]),t._v(" "),a("p",[t._v("当试图满足最后两个条件时，更大的块是首选的。")]),t._v(" "),a("h2",{attrs:{id:"配置-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-configuration"}},[t._v("#")]),t._v(" 配置 Configuration")]),t._v(" "),a("p",[t._v("Webpack 为希望更多地控制该功能的开发人员提供了一组选项。")]),t._v(" "),a("p",[t._v("选择默认配置是为了适应 web 性能的最佳实践，但是您的项目的最佳策略可能不同。 如果您正在更改配置，那么您应该测量更改的影响，以确保有真正的好处。")]),t._v(" "),a("h2",{attrs:{id:"optimization-splitchunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimization-splitchunks"}},[t._v("#")]),t._v(" optimization.splitChunks")]),t._v(" "),a("p",[t._v("This configuration object represents the default behavior of the "),a("code",[t._v("SplitChunksPlugin")]),t._v(".")]),t._v(" "),a("p",[t._v("这个配置对象表示 SplitChunksPlugin 的默认行为。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language-webpack.config.js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      chunks: 'async',\n      minSize: 30000,\n      minRemainingSize: 0,\n      maxSize: 0,\n      minChunks: 1,\n      maxAsyncRequests: 6,\n      maxInitialRequests: 4,\n      automaticNameDelimiter: '~',\n      automaticNameMaxLength: 30,\n      cacheGroups: {\n        defaultVendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true\n        }\n      }\n    }\n  }\n};\n")])])]),t._v(" "),a("p",[t._v("当文件路径被 webpack 处理时，它们总是包含 / 在 Unix 系统和 Windows 上。 这就是为什么在{ cacheGroup }中使用[ / ]。 必须使用测试字段来表示路径分隔符。 / 或 in { cacheGroup }。 测试将导致问题时，使用跨平台。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-automaticnamedelimiter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-automaticnamedelimiter"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.automaticNameDelimiter")])]),t._v(" "),a("p",[a("code",[t._v("string")])]),t._v(" "),a("p",[t._v("默认情况下，webpack 将使用块的起源和名称(例如 vendors ~ main.js)生成名称。")]),t._v(" "),a("ul",[a("li",[t._v("此选项允许您指定用于生成的名称的分隔符。")])]),t._v(" "),a("h3",{attrs:{id:"splitchunks-automaticnamemaxlength"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-automaticnamemaxlength"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.automaticNameMaxLength")])]),t._v(" "),a("p",[a("code",[t._v("number = 109")])]),t._v(" "),a("p",[t._v("允许为 SplitChunksPlugin 生成的块名设置最大字符数。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-chunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-chunks"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.chunks")])]),t._v(" "),a("p",[a("code",[t._v("function (chunk) string")]),t._v("\n参数将选择哪些方式进行优化。")]),t._v(" "),a("ul",[a("li",[t._v("当这个选项是字符串时，有效值为 "),a("code",[t._v("all")]),t._v(", "),a("code",[t._v("async")]),t._v("（异步代码）, 和 "),a("code",[t._v("initial")]),t._v("(同步代码).")]),t._v(" "),a("li",[t._v("当这个选项为 "),a("code",[t._v("all")]),t._v("时，因为这意味着即使在异步块和非异步块之间都可以生效。")]),t._v(" "),a("li",[t._v("参数为"),a("code",[t._v("async时")]),t._v("：针对异步代码有效")]),t._v(" "),a("li",[t._v("参数为"),a("code",[t._v("initial")]),t._v("时：针对同步代码有效\nwebpack.config.js")])]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// include all types of chunks")]),t._v("\n      chunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("或者，您可以提供一个函数来进行更多的控制。返回值将指示是否包含每个块。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chunks")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exclude `my-excluded-chunk`")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-excluded-chunk'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("你可以把这个配置和 HtmlWebpackPlugin 结合起来，它会为你注入所有生成的供应商块。")]),t._v(" "),a("h4",{attrs:{id:"chunk-实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk-实战"}},[t._v("#")]),t._v(" chunk 实战")]),t._v(" "),a("blockquote",[a("p",[t._v("适合异步的代码 chunks: 'async'")])]),t._v(" "),a("h5",{attrs:{id:"当chunks-设置为-async-时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当chunks-设置为-async-时"}},[t._v("#")]),t._v(" 当chunks 设置为 async 时：")]),t._v(" "),a("blockquote",[a("p",[t._v("异步代码参考")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function getComponent() {\n\treturn import(/* webpackChunkName:\"lodash\" */ 'lodash').then(({ default: _ }) => {\n\t\tvar element = document.createElement('div');\n\t\telement.innerHTML = _.join(['Stark', 'Wang'], ' ');\n\t\treturn element;\n\t})\n}\n\ngetComponent().then(element => {\n\tdocument.body.appendChild(element);\n});\n")])])]),a("blockquote",[a("p",[t._v("同步代码参考（设置为async时：对同步的代码无效）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var element = document.createElement('div');\nelement.innerHTML = _.join(['Stark', 'Wang'], ' ');\ndocument.body.appendChild(element);\n")])])]),a("h5",{attrs:{id:"当chunks-设置为-all-时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当chunks-设置为-all-时"}},[t._v("#")]),t._v(" 当chunks 设置为 all 时：")]),t._v(" "),a("blockquote",[a("p",[t._v("上面两个代码都生效")])]),t._v(" "),a("h3",{attrs:{id:"splitchunks-maxasyncrequests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-maxasyncrequests"}},[t._v("#")]),t._v(" splitChunks.maxAsyncRequests")]),t._v(" "),a("p",[t._v("number")]),t._v(" "),a("blockquote",[a("p",[t._v("Maximum number of parallel requests when on-demand loading.")])]),t._v(" "),a("p",[t._v("按需加载时并行请求的最大数量。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-maxinitialrequests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-maxinitialrequests"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.maxInitialRequests")])]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("Maximum number of parallel requests at an entry point.")]),t._v(" "),a("p",[t._v("入口点上并行请求的最大数量。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-minchunks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-minchunks"}},[t._v("#")]),t._v(" splitChunks.minChunks")]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("分割前必须共享模块的最小块数。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-minsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-minsize"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.minSize")])]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("要生成的块的最小大小(以字节为单位)。")]),t._v(" "),a("blockquote",[a("p",[t._v("分离后的最小块文件大小，单位为字节")])]),t._v(" "),a("blockquote",[a("p",[t._v("把minSize: 300000000,调到非常大")])]),t._v(" "),a("blockquote",[a("p",[t._v("代码如果不会超过这个，就不会做代码分割了")])]),t._v(" "),a("ul",[a("li",[t._v("lodash > 30000kb 就做代码分割")])]),t._v(" "),a("h4",{attrs:{id:"实战-minsize-参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战-minsize-参考"}},[t._v("#")]),t._v(" 实战 minSize 参考")]),t._v(" "),a("blockquote",[a("p",[t._v("把minSize设置为 300000000")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("minSize:300000000,\n")])])]),a("p",[a("strong",[t._v("index.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import _ from "lodash";\nfunction CreateDom() {\n  var element = document.createElement("div");\n  element.innerHTML = _.join(["Welcome", "to", "Stark", "gitfe.com"], " ");\n  document.body.appendChild(element);\n  return element;\n}\n\nCreateDom()\n')])])]),a("h3",{attrs:{id:"splitchunks-minremainingsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-minremainingsize"}},[t._v("#")]),t._v(" splitChunks.minRemainingSize")]),t._v(" "),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-minremainingsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-minremainingsize"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.minRemainingSize")]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("在 webpack 5中引入了 minremainingsize 选项，以确保分割后剩余块的最小大小超过一个限制，从而避免零大小的模块。 在“开发”模式下默认为0。 对于其他情况，splitChunks.minRemainingSize 默认值为 splitChunks.minSize，因此除了极少数需要深度控制的情况外，不需要手动指定它。")]),t._v(" "),a("p",[t._v("只有当剩下一个块时，minremainingsize 才会生效。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-maxsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-maxsize"}},[t._v("#")]),t._v(" splitChunks.maxSize")]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("使用 maxSize (全局优化.splitchunks.maxSize / cache 组优化.splitchunks.cachegroups [ x ]。 Maxsize)告诉 webpack 尝试将比 maxSize 大的块拆分为更小的部分。 零件的尺寸至少小于最大尺寸(仅次于最大尺寸)。 该算法是确定性的，对模块的更改只会产生局部影响。 因此，当使用长期缓存时，它是可用的，并且不需要记录。 Maxsize 只是一个提示，当模块大于 maxSize 时，可能会违反 maxSize，或者分割会违反 minSize。")]),t._v(" "),a("p",[t._v("当块已经有一个名称时，每个部分将从该名称派生出一个新名称。 根据 optimization.splitChunks.hidePathInfo 的值，它将添加从第一个模块名派生的键或其散列。")]),t._v(" "),a("p",[t._v("maxSize option is intended to be used with HTTP/2 and long term caching. It increases the request count for better caching. It could also be used to decrease the file size for faster rebuilding.")]),t._v(" "),a("p",[t._v("Maxsize 选项用于 http / 2和长期缓存。 它增加了更好的缓存请求计数。 它还可以用来减小文件大小，以便更快地重新生成。")]),t._v(" "),a("p",[t._v("maxSize takes higher priority than maxInitialRequest/maxAsyncRequests. Actual priority is maxInitialRequest/maxAsyncRequests < maxSize < minSize.")]),t._v(" "),a("p",[t._v("Maxsize 的优先级高于 maxinitialrequest / maxasyncrequests。")]),t._v(" "),a("p",[t._v("Setting the value for maxSize sets the value for both maxAsyncSize and maxInitialSize.")]),t._v(" "),a("p",[t._v("设置 maxSize 的值将同时设置 maxAsyncSize 和 maxInitialSize 的值。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-maxasyncsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-maxasyncsize"}},[t._v("#")]),t._v(" splitChunks.maxAsyncSize")]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("Like maxSize, maxAsyncSize can be applied globally (splitChunks.maxAsyncSize), to cacheGroups (splitChunks.cacheGroups.{cacheGroup}.maxAsyncSize), or to the fallback cache group (splitChunks.fallbackCacheGroup.maxAsyncSize).")]),t._v(" "),a("p",[t._v("与 maxSize 一样，maxAsyncSize 可以全局应用(splitchunks.maxAsyncSize) ，也可以应用于 cacheGroups (splitchunks.cacheGroups. { cacheGroup } . maxAsyncSize)或 fallback 缓存组(splitchunks.fallbackcachegroup.asyncsize)。")]),t._v(" "),a("p",[t._v("The difference between maxAsyncSize and maxSize is that maxAsyncSize will only affect on-demand loading chunks.")]),t._v(" "),a("p",[t._v("Maxasyncsize 和 maxSize 的区别在于 maxAsyncSize 只会影响按需加载的块。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-maxinitialsize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-maxinitialsize"}},[t._v("#")]),t._v(" splitChunks.maxInitialSize")]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("像 maxSize 一样，maxInitialSize 可以全局应用(splitchunks.maxInitialSize) ，\n可以应用于 cacheGroups (splitchunks.cacheGroups. { cacheGroup } . maxInitialSize) ，也可以应用于 fallback 缓存组(splitchunks.fallbackcachegroup.maxInitialSize)。")]),t._v(" "),a("p",[t._v("Maxinitialsize 和 maxSize 的区别在于 maxInitialSize 只会影响初始加载块。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-name"}},[t._v("#")]),t._v(" splitChunks.name")]),t._v(" "),a("p",[a("code",[t._v("boolean = true function (module, chunks, cacheGroupKey) => string")]),t._v(" "),a("code",[t._v("string")])]),t._v(" "),a("p",[t._v("Also available for each cacheGroup: splitChunks.cacheGroups.{cacheGroup}.name.")]),t._v(" "),a("p",[t._v("也可用于每个 cacheGroup: splitChunks.cacheGroups. { cacheGroup } . name。")]),t._v(" "),a("p",[t._v("提供 true 将根据块和缓存组密钥自动生成一个名称。")]),t._v(" "),a("p",[t._v("提供字符串或函数允许您使用自定义名称。 指定总是返回相同字符串的字符串或函数将把所有公共模块和供应商合并到一个块中。 这可能会导致更大的初始下载量和降低页面加载速度。")]),t._v(" "),a("p",[t._v("如果您选择指定一个函数，您可能会发现 chunk.name 和 chunk.hash 属性(其中 chunk 是块数组的一个元素)在为块选择名称时特别有用。")]),t._v(" "),a("p",[t._v("如果 splitchunks.name 文件与入口点名称匹配，入口点将被移除。")]),t._v(" "),a("p",[t._v("建议在生产构建中将 splitchunks.name / 代码设置为 false，这样它就不会不必要地更改名称。")]),t._v(" "),a("p",[a("strong",[t._v("main.js")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lodash'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'webpack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cacheGroups"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        commons"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\\\/]node_modules[\\\\/]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cacheGroupKey here is `commons` as the key of the cacheGroup")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chunks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cacheGroupKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" moduleFileName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("identifier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduceRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" allChunksNames "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" chunks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'~'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("cacheGroupKey"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("allChunksNames"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("moduleFileName"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          chunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("使用以下 splitChunks 配置运行 webpack 也会输出通用组的一个块，它的下一个名称是: commons-main-lodash。 Js.e7519d2bb8777058fa27.js (作为实际输出示例给出的哈希)。")]),t._v(" "),a("p",[t._v("当为不同的分割块分配相同的名称时，所有供应商模块都被放置到一个共享块中，尽管这是不被推荐的，因为它会导致更多的代码下载。")]),t._v(" "),a("h3",{attrs:{id:"splitchunks-automaticnameprefix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-automaticnameprefix"}},[t._v("#")]),t._v(" splitChunks.automaticNamePrefix")]),t._v(" "),a("p",[a("code",[t._v("string = ''")])]),t._v(" "),a("p",[t._v("为创建的块设置名称前缀。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      automaticNamePrefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'general-prefix'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      cacheGroups"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        react"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n          automaticNamePrefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-chunks-prefix'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"splitchunks-cachegroups"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.cacheGroups")])]),t._v(" "),a("p",[t._v("Cache groups can inherit and/or override any options from splitChunks.*; but test, priority and reuseExistingChunk can only be configured on cache group level. To disable any of the default cache groups, set them to false.")]),t._v(" "),a("p",[t._v("缓存组可以继承 和/或 重写 splitChunks 中的任何选项。 splitChunks.* ; 但是 test、 priority 和 reuseExistingChunk 只能在缓存组级别上配置。 若要禁用任何默认缓存组，请将它们设置为 false。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        default: false\n      }\n    }\n  }\n};\n")])])]),a("h3",{attrs:{id:"splitchunks-cachegroups-cachegroup-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-priority"}},[t._v("#")]),t._v(" "),a("code",[t._v("splitChunks.cacheGroups.{cacheGroup}.priority")])]),t._v(" "),a("p",[a("code",[t._v("number")])]),t._v(" "),a("p",[t._v("一个模块可以属于多个缓存组。 优化将偏好具有更高优先级的缓存组。 默认组的优先级为负，以允许自定义组获得更高的优先级(自定义组的默认值为0)。")]),t._v(" "),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-reuseexistingchunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-reuseexistingchunk"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.reuseExistingChunk")]),t._v(" "),a("p",[a("code",[t._v("boolean")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("If the current chunk contains modules already split out from the main bundle,")])]),t._v(" "),a("li",[a("p",[t._v("it will be reused instead of a new one being generated. This can impact the resulting file name of the chunk.")])])]),t._v(" "),a("p",[t._v("如果当前块包含已经从主包中分离出来的模块，那么将重用它，而不是生成新的模块。 这可能会影响块的结果文件名。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          reuseExistingChunk: true\n        }\n      }\n    }\n  }\n};\n")])])]),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-type"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.type")]),t._v(" "),a("p",[a("code",[t._v("function RegExp string")])]),t._v(" "),a("p",[t._v("Allows to assign modules to a cache group by module type.\n允许按模块类型将模块分配给缓存组。")]),t._v(" "),a("p",[t._v("_"),a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        json: {\n          type: 'json'\n        }\n      }\n    }\n  }\n};\n")])])]),a("h4",{attrs:{id:"splitchunks-cachegroups-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-test"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.test")]),t._v(" "),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-test"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.test")]),t._v(" "),a("p",[t._v("function (module, chunk) => boolean RegExp string")]),t._v(" "),a("p",[t._v("控制此缓存组选择哪些模块。 省略它选择所有模块。 它可以匹配绝对模块资源路径或块名称。 当一个块名称匹配时，块中的所有模块都被选中。")]),t._v(" "),a("p",[t._v("Providing a function to{cacheGroup}.test:")]),t._v(" "),a("p",[t._v("为{ cacheGroup } . test 提供一个函数:")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        svgGroup: {\n          test(module, chunks) {\n            // `module.resource` contains the absolute path of the file on disk.\n            // Note the usage of `path.sep` instead of / or \\, for cross-platform compatibility.\n            const path = require('path');\n            return module.resource &&\n                 module.resource.endsWith('.svg') &&\n                 module.resource.includes(`${path.sep}cacheable_svgs${path.sep}`);\n          }\n        },\n        byModuleTypeGroup: {\n          test(module, chunks) {\n            return module.type === 'javascript/auto';\n          }\n        }\n      }\n    }\n  }\n};\n")])])]),a("blockquote",[a("p",[t._v("In order to see what information is available in module and chunks objects,\nyou can put debugger; statement in the callback.\nThen run your webpack build in debug mode to inspect the parameters in Chromium DevTools.")])]),t._v(" "),a("p",[t._v("为了查看模块和块对象中有哪些信息可用，可以在回调中放置 debugger; 语句。 然后在调试模式下运行 webpack 构建来检查 Chromium 开发工具中的参数。")]),t._v(" "),a("p",[t._v("Providing a RegExp to {cacheGroup}.test:")]),t._v(" "),a("p",[t._v("向{ cacheGroup } . test 提供 RegExp:")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          // Note the usage of `[\\\\/]` as a path separator for cross-platform compatibility.\n          test: /[\\\\/]node_modules[\\\\/]|vendor[\\\\/]analytics_provider|vendor[\\\\/]other_lib/\n        }\n      }\n    }\n  }\n};\n\n")])])]),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-filename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-filename"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.filename")]),t._v(" "),a("p",[t._v("string function (chunkData): string")]),t._v(" "),a("p",[t._v("当且仅当文件是初始块时，允许重写文件名。 在 output.filename 中提供的所有占位符在这里也可以使用。")]),t._v(" "),a("p",[t._v("这个选项也可以在 splitChunks.filename 中全局设置，但是不推荐这样做，如果 splitchunks.chunk 没有设置为‘ initial’ ，可能会导致错误。 避免全局设置。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          filename: '[name].bundle.js'\n        }\n      }\n    }\n  }\n};\n\n")])])]),a("p",[t._v("And as a function:")]),t._v(" "),a("p",[t._v("作为一个函数:")]),t._v(" "),a("p",[t._v("webpack.config.js")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          filename: (chunkData) => {\n            // Use chunkData object for generating filename string based on your requirements\n            return `${chunkData.chunk.name}-bundle.js`;\n          }\n        }\n      }\n    }\n  }\n};\n")])])]),a("p",[t._v("It is possible to create a folder structure by providing path prefixing the filename: 'js/vendor/bundle.js'.")]),t._v(" "),a("p",[t._v("可以通过提供文件名前缀“ js / vendor / bundle. js”的路径来创建文件夹结构。")]),t._v(" "),a("p",[t._v("webpack.config.js")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          filename: 'js/[name]/bundle.js'\n        }\n      }\n    }\n  }\n};\n")])])]),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-enforce"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-enforce"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.enforce")]),t._v(" "),a("p",[t._v("boolean = false")]),t._v(" "),a("p",[t._v("告诉 webpack 忽略 splitChunks.minSize，splitchunks.minchunk，splitChunks.maxAsyncRequests 和 splitChunks.maxInitialRequests 选项，并始终为这个缓存组创建块。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          enforce: true\n        }\n      }\n    }\n  }\n};\n")])])]),a("h4",{attrs:{id:"splitchunks-cachegroups-cachegroup-idhint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-cachegroups-cachegroup-idhint"}},[t._v("#")]),t._v(" splitChunks.cacheGroups.{cacheGroup}.idHint")]),t._v(" "),a("p",[t._v("string")]),t._v(" "),a("p",[t._v("Sets the hint for chunk id. It will be added to chunk's filename.")]),t._v(" "),a("p",[t._v("设置块 id 的提示。它将被添加到块的文件名中。")]),t._v(" "),a("p",[t._v("webpack.config.js")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        defaultVendors: {\n          idHint: 'vendors'\n        }\n      }\n    }\n  }\n};\n")])])]),a("p",[t._v("例子\n默认值: 示例1\n// index.js")]),t._v(" "),a("p",[t._v("import('./a'); // dynamic import\n// a.js\nimport 'react';")]),t._v(" "),a("p",[t._v("//...\nResult: A separate chunk would be created containing react. At the import call this chunk is loaded in parallel to the original chunk containing ./a.")]),t._v(" "),a("p",[t._v("结果: 一个包含反应的独立块被创建出来。 在导入调用时，该块与包含该块的原始块并行加载。 / a.")]),t._v(" "),a("p",[t._v("为什么:")]),t._v(" "),a("p",[t._v("条件1: 块包含来自node_modules")]),t._v(" "),a("p",[t._v("条件第2项:r eact is bigger than 30kb 大于30kb")]),t._v(" "),a("p",[t._v("条件3: 导入调用中的并行请求数为2")]),t._v(" "),a("p",[t._v("条件4: 在初始页面加载时不影响请求")]),t._v(" "),a("p",[t._v("这背后的原因是什么？ react可能不会像应用程序代码那样经常变化。 通过将其移动到一个单独的块中，这个块可以与你的应用程序代码分开缓存(假设你正在使用 chunkhash、 records、 Cache-Control 或其他长期缓存方法)。")]),t._v(" "),a("p",[t._v("默认值: 示例2\n// entry.js")]),t._v(" "),a("p",[t._v("// dynamic imports")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import('./a');\nimport('./b');\n")])])]),a("p",[t._v("// a.js\nimport './helpers'; // helpers is 40kb in size")]),t._v(" "),a("p",[t._v("//...\n// b.js\nimport './helpers';\nimport './more-helpers'; // more-helpers is also 40kb in size")]),t._v(" "),a("p",[t._v("//...\nResult: A separate chunk would be created containing ./helpers and all dependencies of it. At the import calls this chunk is loaded in parallel to the original chunks.")]),t._v(" "),a("p",[t._v("结果: 将创建一个包含。 / helpers 及其所有依赖关系。 在导入调用时，这个块与原始块并行加载。")]),t._v(" "),a("p",[t._v("Why:")]),t._v(" "),a("p",[t._v("为什么:")]),t._v(" "),a("p",[t._v("Condition 1: The chunk is shared between both import calls 条件1: 这个块在两个导入调用之间共享\nCondition 2: 条件第2项:helpers is bigger than 30kb 大于30kb\nCondition 3: Number of parallel requests at the import calls is 2 条件3: 导入调用中的并行请求数为2\nCondition 4: Doesn't affect request at initial page load 条件4: 在初始页面加载时不影响请求\nPutting the content of helpers into each chunk will result into its code being downloaded twice. By using a separate chunk this will only happen once. We pay the cost of an additional request, which could be considered a tradeoff. That's why there is a minimum size of 30kb.")]),t._v(" "),a("p",[t._v("将 helpers 的内容放入每个块将导致其代码被下载两次。 通过使用单独的块，这种情况只会发生一次。 我们支付额外请求的费用，这可以被认为是一种折衷。 这就是为什么最小的大小是30kb。")]),t._v(" "),a("p",[t._v("Split Chunks: Example 1\n分块: 例1\nCreate a commons chunk, which includes all code shared between entry points.")]),t._v(" "),a("p",[t._v("创建一个公共块，其中包括入口点之间共享的所有代码。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          name: 'commons',\n          chunks: 'initial',\n          minChunks: 2\n        }\n      }\n    }\n  }\n};\n")])])]),a("p",[t._v("这种配置可以放大您的初始捆绑包，建议在不需要立即使用模块时使用动态导入。")]),t._v(" "),a("p",[t._v("分块: 例2\n创建一个供应商块，其中包括整个应用程序中节点模块的所有代码。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendors',\n          chunks: 'all'\n        }\n      }\n    }\n  }\n};\n")])])]),a("p",[t._v("这可能导致包含所有外部包的大块。 建议只包含您的核心框架和实用程序，并动态加载其余的依赖项。")]),t._v(" "),a("p",[t._v("分块: 例3\n创建一个自定义供应商块，其中包含与 RegExp 匹配的某些节点模块包。")]),t._v(" "),a("p",[a("strong",[t._v("webpack.config.js")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("webpack.config.js")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/,\n          name: 'vendor',\n          chunks: 'all',\n        }\n      }\n    }\n  }\n};\n")])])]),a("p",[t._v("这将导致分裂反应和反应多姆成为一个单独的块。 如果您不确定一个块中包含了哪些包，可以参考包分析部分获得详细信息。")]),t._v(" "),a("h3",{attrs:{id:"使用webpack-async-chunk-names-plugin解决打包后名字问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用webpack-async-chunk-names-plugin解决打包后名字问题"}},[t._v("#")]),t._v(" 使用webpack-async-chunk-names-plugin解决打包后名字问题")]),t._v(" "),a("blockquote",[a("p",[t._v("不要对异步块的文件名感到惊讶，因为我们修改了 webpack.config.js 的 output.chunkFilename。\n如果你不喜欢基于数字的文件名，你可以使用 webpack。 命名为 chunksplugin 并转换块名称。\n还有另一个模块 webpack-async-chunk-names-plugin，它会记住 async import 的文件名，并使用它作为块文件名。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://s.shudong.wang/shudong/20200219184622.png",alt:"20200219184622"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const AsyncChunkNames = require("webpack-async-chunk-names-plugin");\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);